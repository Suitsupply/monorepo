// Generated by Avo VERSION 140.25.0. You should never have to make changes to this file.
// If you find yourself in the situation where you have to edit the file please contact us at hi@avo.app.
// If you encounter a git conflict in this file run `avo pull` and it will be resolved automatically.
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

// fetch() polyfill
(function () {
  if (typeof window === 'undefined') {
    return;
  }
  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function () {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj: any) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name: any) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value: any) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items: any) {
    var iterator: any = {
      next: function () {
        var value = items.shift();
        return { done: value === undefined, value: value }
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function () {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers: any) {
    // @ts-ignore
    (this as any).map = {};

    if (headers instanceof Headers) {
      (headers as any).forEach(function (value: any, name: any) {
        // @ts-ignore
        this.append(name, value);
        // @ts-ignore
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function (header: any) {
        // @ts-ignore
        this.append(header[0], header[1]);
        // @ts-ignore
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name: any) {
        // @ts-ignore
        this.append(name, headers[name]);
        // @ts-ignore
      }, this);
    }
  }

  Headers.prototype.append = function (name: any, value: any) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function (name: any) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name: any) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function (name: any) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function (name: any, value: any) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function (callback: any, thisArg: any) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function () {
    var items: any = [];
    this.forEach(function (_value: any, name: any) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function () {
    var items: any = [];
    this.forEach(function (value: any) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function () {
    var items: any = [];
    this.forEach(function (value: any, name: any) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body: any) {
    if (body.bodyUsed) {
      return true;
    }
    body.bodyUsed = true;
    return false;
  }

  function fileReaderReady(reader: any) {
    return new Promise(function (resolve: any, reject: any) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob: any) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob: any) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf: any) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]!);
    }
    return chars.join('')
  }

  function bufferClone(buf: any) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    // @ts-ignore
    (this as any).bodyUsed = false;

    // @ts-ignore
    (this as any)._initBody = function (body: any) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      // @ts-ignore
      (this as any).blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return Promise.reject(new TypeError('Already read'));
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      // @ts-ignore
      (this as any).arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          if (consumed(this)) {
            return Promise.reject(new TypeError('Already read'));
          } else {
            return Promise.resolve(this._bodyArrayBuffer);
          }
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }

    // @ts-ignore
    (this as any).text = function () {
      var rejected = consumed(this);
      if (rejected) {
        return Promise.reject(new TypeError('Already read'));
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text');
      } else {
        return Promise.resolve(this._bodyText);
      }
    };

    if (support.formData) {
      // @ts-ignore
      (this as any).formData = function () {
        return this.text().then(decode)
      };
    }

    // @ts-ignore
    (this as any).json = function () {
      return this.text().then(JSON.parse)
    };

    // @ts-ignore
    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method: any) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input: any, options: any) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if ((input as any).bodyUsed) {
        throw new TypeError('Already read')
      }
      // @ts-ignore
      (this as any).url = (input as any).url;
      // @ts-ignore
      this.credentials = (input as any).credentials;
      if (!options.headers) {
        // @ts-ignore
        this.headers = new Headers((input as any).headers);
      }
      // @ts-ignore
      this.method = (input as any).method;
      // @ts-ignore
      this.mode = (input as any).mode;
      // @ts-ignore
      this.signal = (input as any).signal;
      if (!body && (input as any)._bodyInit != null) {
        body = (input as any)._bodyInit;
        (input as any).bodyUsed = true;
      }
    } else {
      // @ts-ignore
      this.url = String(input);
    }

    // @ts-ignore
    this.credentials = options.credentials || this.credentials || 'same-origin';
    // @ts-ignore
    if (options.headers || !this.headers) {
      // @ts-ignore
      this.headers = new Headers(options.headers);
    }
    // @ts-ignore
    this.method = normalizeMethod(options.method || this.method || 'GET');
    // @ts-ignore
    this.mode = options.mode || this.mode || null;
    // @ts-ignore
    this.signal = options.signal || this.signal;
    // @ts-ignore
    this.referrer = null;

    // @ts-ignore
    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    // @ts-ignore
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    // @ts-ignore
    return new Request(this, { body: this._bodyInit })
  };

  function decode(body: any) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function (bytes: any) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders: any) {
    // @ts-ignore
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function (line: any) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit: any, options: any) {
    if (!options) {
      options = {};
    }

    // @ts-ignore
    this.type = 'default';
    // @ts-ignore
    this.status = options.status === undefined ? 200 : options.status;
    // @ts-ignore
    this.ok = this.status >= 200 && this.status < 300;
    // @ts-ignore
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    // @ts-ignore
    this.headers = new Headers(options.headers);
    // @ts-ignore
    this.url = options.url || '';
    // @ts-ignore
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    // @ts-ignore
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      // @ts-ignore
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function () {
    // @ts-ignore
    var response = new Response(null, { status: 0, statusText: '' });
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url: any, status: any) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    // @ts-ignore
    return new Response(null, { status: status, headers: { location: url } })
  };

  (self as any).DOMException = (self as any).DOMException;
  try {
    new (self as any).DOMException();
  } catch (err) {
    (self as any).DOMException = function (message: any, name: any) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    (self as any).DOMException.prototype = Object.create(Error.prototype);
    (self as any).DOMException.prototype.constructor = (self as any).DOMException;
  }

  function fetch(input: any, init: any) {
    return new Promise(function (resolve, reject) {
      // @ts-ignore
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new (self as any).DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        (options as any).url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : (xhr as any).responseText;
        // @ts-ignore
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function () {
        reject(new (self as any).DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value: any, name: any) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function () {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    (self as any).fetch = fetch;
    (self as any).Headers = Headers;
    (self as any).Request = Request;
    (self as any).Response = Response;
  }
})();

export enum AvoEnv {
  Prod = "prod",
  Staging = "staging",
  Dev = "dev",
}

export interface CustomDestination {
  make?(env: AvoEnv, apiKey: string): void;
  logEvent?: (eventName: string, eventProperties: Record<string, any>) => void;
  setUserProperties?: (userId: string, userProperties: Record<string, any>) => void;
  identify?: (userId: string) => void;
  unidentify?: () => void;
  logPage?: (pageName: string, eventProperties: Record<string, any>) => void;
  revenue?: (amount: number, eventProperties: Record<string, any>) => void;
  setGroupProperties?: (
    groupType: string,
    groupId: string,
    groupProperties: Record<string, any>,
  ) => void;
  addCurrentUserToGroup?: (
    groupType: string,
    groupId: string,
    groupProperties: Record<string, any>,
  ) => void;
  logEventWithGroups?: (
    eventName: string,
    eventProperties: any,
    groupTypesToGroupIds: Record<string, string>,
  ) => void;
}

// @ts-ignore
interface AvoAssertMessage {
  eventName?: string;
  tag?: string;
  propertyId?: string;
  message?: string;
  additionalProperties?: string[],
  shape?: any,
  shapeUserProps?: any,
  actualType?: string
}

let __AVO_ENV__: AvoEnv | null = null;
// @ts-ignore
let __AVO_NOOP__: boolean = false;
// @ts-ignore
let __AVO_LOGGER__: AvoLogger | null = null;
// @ts-ignore
let __STRICT__: boolean | null = null;
// @ts-ignore
let __REPORT_FAILURE_AS__: 'error' | 'warn' | 'log' | null = null;

// @ts-ignore
let __WEB_DEBUGGER__: boolean = true;
export const avoInspectorApiKey = "08x2H3eWZd8gAG8XGLnE";
// @ts-ignore
interface AvoInspector {}
let __INSPECTOR__: AvoInspector | null = null;


// polyfill Object.assign
// @ts-ignore
declare interface ObjectConstructor {
  assign: any;
}
// @ts-ignore
if (typeof Object.assign !== 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, "assign", {
    value: function assign(target: any, _varArgs: any) { // .length of function is 2
      if (target == null) { // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      let to = Object(target);

      for (let index = 1; index < arguments.length; index++) {
        let nextSource = arguments[index];

        if (nextSource != null) { // Skip over if undefined or null
          for (let nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
      return to;
    },
    writable: true,
    configurable: true
  });
}

interface AvoLogger {
  logDebug(env: AvoEnv | null, message: string): boolean;
  logWarn(env: AvoEnv | null, message: string): boolean;
  logError(env: AvoEnv | null, error: string): boolean;
}

enum webDebuggerArea {
  BottomRight = "BottomRight",
  BottomLeft = "BottomLeft",
  TopRight = "TopRight",
  TopLeft = "TopLeft"
}

interface bottomRightParameters {
  bottom: number;
  right: number;
}

interface bottomLeftParameters {
  bottom: number;
  left: number;
}

interface topRightParameters {
  top: number;
  right: number;
}

interface topLeftParameters {
  top: number;
  left: number;
}

interface webDebuggerPosition {
  position: webDebuggerArea;
  top?: number;
  right?: number;
  bottom?: number;
  left?: number;
}

interface webDebuggerOptions {
  position?: webDebuggerPosition;
}

interface WebDebuggerPositionSetter {
  BottomRight(p: bottomRightParameters): webDebuggerPosition;
  BottomLeft(p: bottomLeftParameters): webDebuggerPosition;
  TopRight(p: topRightParameters): webDebuggerPosition;
  TopLeft(p: topLeftParameters): webDebuggerPosition;
}

export const WebDebuggerPosition: WebDebuggerPositionSetter = {
  BottomRight: ({ bottom, right }) => ({
    position: webDebuggerArea.BottomRight,
    bottom,
    right,
  }),
  BottomLeft: ({ bottom, left }) => ({
    position: webDebuggerArea.BottomLeft,
    bottom,
    left,
  }),
  TopRight: ({ top, right }) => ({
    position: webDebuggerArea.TopRight,
    top,
    right,
  }),
  TopLeft: ({ top, left }) => ({
    position: webDebuggerArea.TopLeft,
    top,
    left,
  }),
}


let InternalAvoLogger: any = {
  logEventSent: function logEventSent(eventName: string, eventProperties: any, userProperties: any) {
    const message = "Event Sent:" + eventName + "Event Props:" + JSON.stringify(eventProperties) + "User Props:" + JSON.stringify(userProperties);

    if (__AVO_LOGGER__ && __AVO_LOGGER__.logDebug && __AVO_LOGGER__.logDebug(__AVO_ENV__, message)) {
      return
    }
    typeof console !== 'undefined' && console.log("[avo] Event Sent:", eventName, "Event Props:", eventProperties, "User Props:", userProperties);
  },

  log: function log(message: string) {
    if (__AVO_LOGGER__ && __AVO_LOGGER__.logDebug && __AVO_LOGGER__.logDebug(__AVO_ENV__, message)) {
      return
    }
    typeof console !== 'undefined' && console.log("[avo] " + message);
  },

  warn: function warn(message: string) {
    if (__AVO_LOGGER__ && __AVO_LOGGER__.logWarn && __AVO_LOGGER__.logWarn(__AVO_ENV__, message)) {
      return
    }
    typeof console !== 'undefined' && console.warn("[avo] " + message);
  },

  error: function error(message: string, error: string) {
    if (__AVO_LOGGER__ && __AVO_LOGGER__.logError && __AVO_LOGGER__.logError(__AVO_ENV__, message + error)) {
      return
    }
    typeof console !== 'undefined' && console.error("[avo] " + message, error);
  }
};

function convertPropertiesArrayToMap(propertiesArray: [{id: string, name: string, value: string}]): {string: string | null | undefined} {
    let result: {string: string} = {}

    propertiesArray.forEach(value => {
      result[value.name] = value.value
    })

    return result
}

// @ts-ignore
let array_difference: any;
// @ts-ignore
let AvoAssert: any;
array_difference = function array_difference(a1: any[], a2: any[]) {
  let result: any[] = [];
  for (let i = 0; i < a1.length; i++) {
    if (a2.indexOf(a1[i]) === -1) {
      result.push(a1[i]);
    }
  }
  return result;
}

AvoAssert = {
  assertObject: function assertObject(propertyId: string, propName: string, obj: any) {
    if (typeof obj !== 'object') {
      let message = propName +
          ' should be of type object but you provided type ' +
          typeof obj +
          ' with value ' +
          JSON.stringify(obj);
      return [{tag: 'expectedObjectType', propertyId, message, actualType: typeof obj}];
    } else {
      return [];
    }
  },

  assertString: function assertString(propertyId: string, propName: string, str: string) {
    if (typeof str !== 'string') {
      let message = propName +
          ' should be of type string but you provided type ' +
          typeof str +
          ' with value ' +
          JSON.stringify(str);
      return [{tag: 'expectedStringType', propertyId, message, actualType: typeof str}];
    } else {
      return [];
    }
  },

  assertInt: function assertInt(propertyId: string, propName: string, int: number) {
    if (typeof int === 'number' && int !== Math.round(int)) {
      let message = propName +
          ' should be of type int but you provided type float with value ' +
          JSON.stringify(int);
      return [{tag: 'expectedIntType', propertyId, message, actualType: 'float'}];
    } else if (typeof int !== 'number') {
      let message = propName +
          ' should be of type int but you provided type ' +
          typeof int +
          ' with value ' +
          JSON.stringify(int);
      return [{tag: 'expectedIntType', propertyId, message, actualType: typeof int}];
    } else {
      return [];
    }
  },

  assertLong: function assertLong(propertyId: string, propName: string, long: number) {
    if (typeof long === 'number' && long !== Math.round(long)) {
      let message = propName +
          ' should be of type long but you provided type float with value ' +
          JSON.stringify(long);
      return [{tag: 'expectedLongType', propertyId, message, actualType: 'float'}];
    } else if (typeof long !== 'number') {
      let message = propName +
          ' should be of type long but you provided type ' +
          typeof long +
          ' with value ' +
          JSON.stringify(long);
      return [{tag: 'expectedLongType', propertyId, message, actualType: typeof long}];
    } else {
      return [];
    }
  },

  assertFloat: function assertFloat(propertyId: string, propName: string, float: number) {
    if (typeof float !== 'number') {
      let message = propName +
          ' should be of type float but you provided type ' +
          typeof float +
          ' with value ' +
          JSON.stringify(float);
      return [{tag: 'expectedFloatType', propertyId, message, actualType: typeof float}];
    } else {
      return [];
    }
  },

  assertBool: function assertBool(propertyId: string, propName: string, bool: boolean) {
    if (typeof bool !== 'boolean') {
      let message = propName +
          ' should be of type boolean but you provided type ' +
          typeof bool +
          ' with value ' +
          JSON.stringify(bool);
      return [{tag: 'expectedBoolType', propertyId, message, actualType: typeof bool}];
    } else {
      return [];
    }
  },

  assertMax: function assertMax(
    propertyId: string,
    propName: string,
    max: number,
    value: number
  ) {
    if (value > max) {
      let message = propName +
        ' has a maximum value of ' +
        max +
        ' but you provided the value ' +
        JSON.stringify(value);
      return [{tag: 'expectedMax', propertyId, message}];
    } else {
      return [];
    }
  },

  assertMin: function assertMin(
    propertyId: string,
    propName: string,
    min: number,
    value: number
  ) {
    if (value < min) {
      let message = propName +
        ' has a minimum value of ' +
        min +
        ' but you provided the value ' +
        JSON.stringify(value);
      return [{tag: 'expectedMin', propertyId, message}];
    } else {
      return [];
    }
  },

  assertList: function assertList(propertyId: string, propName: string, value: any) {
    if (!Array.isArray(value)) {
      let message = propName + ' should be of type list but you provided type ' + typeof value;
      return [{tag: 'expectedList', propertyId, message}];
    } else {
      return [];
    }
  },

  assertNoAdditionalProperties: function assertNoAdditionalProperties(eventName: string, input: string[], spec: string[]) {
    let additionalKeys = array_difference(input, spec);
    if (additionalKeys.length) {
      let message = "Additional properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
      return [{tag: 'expectedNoAdditionalProperties', additionalProperties: additionalKeys, message: message}];
    } else {
      return [];
    }
  },

  assertNoAdditionalUserProperties: function assertNoAdditionalProperties(eventName: string, input: string[], spec: string[]) {
    let additionalKeys = array_difference(input, spec);
    if (additionalKeys.length) {
      let message = "Additional user properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
      return [{tag: 'expectedNoAdditionalUserProperties', additionalProperties: additionalKeys, message: message}];
    } else {
      return [];
    }
  },
};

let _avo_invoke: any;
let _avo_invoke_meta: any;
let _avo_sampling_rate = 1.0;
_avo_invoke = function _avo_invoke(env: AvoEnv, eventId: string, hash: string, messages: {tag: string, propertyId: string}[], origin: string) {
  // @ts-ignore
  if (typeof (window as any) === 'undefined') { return; }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      // @ts-ignore
      fetch("https://api.avo.app/i", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({
          "ac": "g3LStR06ja5wQBJxRUwX",
          "br": "q8nq0c3J4",
          "en": env,
          "ev": eventId,
          "ha": hash,
          "sc": "JmwsgKTQe50MTmUE9FVs",
          "se": (new Date()).toISOString(),
          "so": "YVbONYzfD",
          "va": messages.length === 0,
          "me": messages,
          "or": origin
        })
      }).then(function(res: any) { return res.json(); }).then(function(data: any) { _avo_sampling_rate = data.sa; }).catch(function() {});
    }
  }
}

_avo_invoke_meta = function _avo_invoke_meta(env: AvoEnv, type: string, messages: {tag: string, propertyId: string}[], origin: string) {
  // @ts-ignore
  if (typeof (window as any) === 'undefined') { return; }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      // @ts-ignore
      fetch("https://api.avo.app/i", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({
          "ac": "g3LStR06ja5wQBJxRUwX",
          "br": "q8nq0c3J4",
          "en": env,
          "ty": type,
          "sc": "JmwsgKTQe50MTmUE9FVs",
          "se": (new Date()).toISOString(),
          "so": "YVbONYzfD",
          "va": messages.length === 0,
          "me": messages,
          "or": origin
        })
      }).then(function(res: any) { return res.json(); }).then(function(data: any) { _avo_sampling_rate = data.sa; }).catch(function() {});
    }
  }
}


let _avo_debugger_log: any;
let _avo_debugger_events_during_boot: any = [];
let _avo_debugger_ready = false;

if (typeof (window as any) !== 'undefined') {
  window.addEventListener("message", function(event) {
    if (event.origin !== "https://www.avo.app") {
      return;
    }
    let iframe: any = document.getElementById("avo-debugger");
    if (iframe && event && event.data && event.data.type_ === "avo-debugger-update-style") {
      iframe.style = event.data.style;
    } else if (iframe && event && event.data && event.data.type_ === "avo-debugger-ready") {
      let message = {
        type_: "avo-debugger-boot-events",
        schemaId: "JmwsgKTQe50MTmUE9FVs",
        href: window.location.href,
        events: _avo_debugger_events_during_boot
      };
      _avo_debugger_events_during_boot = [];
      _avo_debugger_ready = true;
      iframe.contentWindow.postMessage(message, "https://www.avo.app/_debugger")
    }
  });
}

_avo_debugger_log = function _avo_debugger_log(eventId: string, eventName: string, messages: any[], eventProperties: any[], userProperties: any[], groupProperties: any[]) {
  if (typeof (window as any) === 'undefined') { return; }
  let event = {
    eventId: eventId,
    eventName: eventName,
    messages: messages,
    timestamp: Date.now(),
    eventProperties,
    userProperties,
    groupProperties
  };

  if (_avo_debugger_ready) {
    let message = {type_: "avo-debugger-events", events: [event]};
    (document.getElementById("avo-debugger") as any).contentWindow.postMessage(message, "https://www.avo.app/_debugger")
  } else {
    _avo_debugger_events_during_boot.push(event);
  }
}

function _avo_debugger_send_position(position: webDebuggerPosition) {
  if (typeof window === 'undefined') { return; }
  window.addEventListener("message", function(event) {
    if (event.origin !== "https://www.avo.app") {
      return;
    }
    if (event.data.type_ === "avo-debugger-ready" && position !== null) {
      var message = {type_: "avo-debugger-position", position: position};
      document.getElementById("avo-debugger").contentWindow.postMessage(message, "https://www.avo.app/_debugger")
    }
  })
}


export interface ProductsCart {
  amount: number
  identifier: string
  variation: string
  currency: CurrencyValueType
  variantId: string
  quantity: number
}

export interface Context {
}

export const MixAndMatch = {
  'TRUE': 'true',
  'FALSE': 'false',
} as const;
export type MixAndMatchType = typeof MixAndMatch;
export type MixAndMatchValueType = MixAndMatchType[keyof MixAndMatchType];

export const ItemListName = {
  'CATEGORY_PAGE': 'category page',
  'CATEGORY_PAGE_FILTERED': 'category page filtered',
  'SHOP_THE_LOOK': 'shop the look',
  'WISHLIST': 'wishlist',
  'YOU_MIGHT_ALSO_LIKE': 'you might also like',
  'COLOUR_SWATCH': 'colour swatch',
  'BLACK_TIE_PACKAGE': 'black tie package',
  'VIEW_SIMILAR_ITEMS': 'view similar items',
  'SEARCH': 'search',
  'CUSTOM_MADE': 'custom made',
  'GIFTCARD_LANDING': 'giftcard landing',
  'GIFT_WRAPPING': 'gift wrapping',
  'EXPLORE_THE_COLLECTION': 'explore the collection',
  'DISCOVER_THE_NEW_COLLECTION': 'discover the new collection',
  'MOST_POPULAR': 'most popular',
} as const;
export type ItemListNameType = typeof ItemListName;
export type ItemListNameValueType = ItemListNameType[keyof ItemListNameType];

export const Language = {
  'EN': 'en',
  'ES': 'es',
  'FR': 'fr',
  'DE': 'de',
  'IT': 'it',
  'SV': 'sv',
  'PL': 'pl',
  'ZH': 'zh',
} as const;
export type LanguageType = typeof Language;
export type LanguageValueType = LanguageType[keyof LanguageType];

export const PlpGridImages = {
  '2_PRODUCTS_DEFAULT': '2_products_default',
  '1_PRODUCT_WITH_2_IMAGES_DEFAULT': '1_product_with_2_images_default',
  '1_PRODUCT_WITH_3_IMAGES_DEFAULT': '1_product_with_3_images_default',
  '1_PRODUCT_WITH_1_IMAGE_DEFAULT': '1_product_with_1_image_default',
  '3_PRODUCTS_GRID': '3_products_grid',
  '4_PRODUCTS_GRID': '4_products_grid',
  '1_PRODUCT_DEFAULT': '1_product_default',
  '2_PRODUCTS_GRID': '2_products_grid',
} as const;
export type PlpGridImagesType = typeof PlpGridImages;
export type PlpGridImagesValueType = PlpGridImagesType[keyof PlpGridImagesType];

export const Category = {
  'JACKETS': 'jackets',
  'SUITS': 'suits',
  'TROUSERS': 'trousers',
  'KNITWEAR': 'knitwear',
  'COATS': 'coats',
  'SHIRTS': 'shirts',
  'SHOES': 'shoes',
  'GIFT_CARD': 'gift card',
  'BELTS': 'belts',
  'WAISTCOATS': 'waistcoats',
  'TIESSUB': 'tiessub',
  'HANDKERCHIEFS': 'handkerchiefs',
  'TIES': 'ties',
  'SUSPENDERS': 'suspenders',
  'CUFFLINKS': 'cufflinks',
  'SHORTS': 'shorts',
  'SOCKS': 'socks',
  'GLOVES': 'gloves',
  'SCARVES': 'scarves',
  'SHOECARE': 'shoecare',
  'HATS': 'hats',
  'GIFT_WRAPPING': 'gift-wrapping',
} as const;
export type CategoryType = typeof Category;
export type CategoryValueType = CategoryType[keyof CategoryType];

export const LoggedIn = {
  'TRUE': 'true',
  'FALSE': 'false',
} as const;
export type LoggedInType = typeof LoggedIn;
export type LoggedInValueType = LoggedInType[keyof LoggedInType];

export const EventCategory = {
  'CHECKOUT_INTERACTIONS': 'checkout_interactions',
  'PLP_INTERACTIONS': 'plp_interactions',
  'PDP_INTERACTIONS': 'pdp_interactions',
  'GLOBAL_INTERACTIONS': 'global_interactions',
  'FOOTER_INTERACTIONS': 'footer_interactions',
  'ECOMMERCE_INTERACTION': 'ecommerce_interaction',
  'JOURNAL_INTERACTIONS': 'journal_interactions',
  'BTC_INTERACTIONS': 'btc_interactions',
  'CM_INTERACTIONS': 'cm_interactions',
  'LOOKBUILDER_INTERACTIONS': 'lookbuilder_interactions',
} as const;
export type EventCategoryType = typeof EventCategory;
export type EventCategoryValueType = EventCategoryType[keyof EventCategoryType];

export const ListId = {
  'CATEGORY_PAGE': 'category_page',
  'CATEGORY_PAGE_FILTERED': 'category_page_filtered',
  'SHOP_THE_LOOK_MINICART': 'shop-the-look_minicart',
  'SHOP_THE_LOOK_WISHLIST': 'shop-the-look_wishlist',
  'SHOP_THE_LOOK_SLIDER': 'shop-the-look_slider',
  'SHOP_THE_LOOK_SLIDER_1': 'shop-the-look_slider_1',
  'SHOP_THE_LOOK_SLIDER_2': 'shop-the-look_slider_2',
  'SHOP_THE_LOOK_SLIDER_3': 'shop-the-look_slider_3',
  'SHOP_THE_LOOK_SLIDER_4': 'shop-the-look_slider_4',
  'SHOP_THE_LOOK_SLIDER_5': 'shop-the-look_slider_5',
  'SHOP_THE_LOOK_SLIDER_6': 'shop-the-look_slider_6',
  'SHOP_THE_LOOK_SLIDER_7': 'shop-the-look_slider_7',
  'WISHLIST': 'wishlist',
  'YOU_MIGHT_ALSO_LIKE_PDP': 'you-might-also-like_pdp',
  'COLOUR_SWATCH_PDP': 'colour-swatch_pdp',
  'BLACK_TIE_PACKAGE_JOURNAL': 'black-tie-package_journal',
  'VIEW_SIMILAR_ITEMS_OOS': 'view-similar-items_oos',
  'SEARCH': 'search',
  'SHOP_THE_LOOK_LOOKBUILDER_SUMMARY_SCREEN': 'shop-the-look_lookbuilder_summary-screen',
  'CUSTOM_MADE': 'custom-made',
  'GIFTCARD_LANDING': 'giftcard_landing',
  'GIFT_WRAPPING_MINI_CART': 'gift-wrapping_mini-cart',
  'DISCOVER_THE_NEW_COLLECTION_CSR_LANDING': 'discover-the-new-collection_csr-landing',
  'MOST_POPULAR_STORE_DETAIL': 'most-popular_store-detail',
  'MOST_POPULAR_STORE_LOCATOR': 'most-popular_store-locator',
  'DISCOVER_THE_NEW_COLLECTION_NEWSLETTER_EMAILPREFERENCES': 'discover-the-new-collection_newsletter-emailpreferences',
  'BLACK_TIE_PACKAGE_CONFIGURATOR': 'black-tie-package_configurator',
} as const;
export type ListIdType = typeof ListId;
export type ListIdValueType = ListIdType[keyof ListIdType];

export const Country = {
  'US': 'us',
  'CA': 'ca',
  'NL': 'nl',
  'GB': 'gb',
  'DE': 'de',
  'FR': 'fr',
  'BE': 'be',
  'IT': 'it',
  'SE': 'se',
  'CH': 'ch',
  'PL': 'pl',
  'ES': 'es',
  'FI': 'fi',
  'DK': 'dk',
  'AT': 'at',
  'NO': 'no',
  'CZ': 'cz',
  'HR': 'hr',
  'HU': 'hu',
  'EE': 'ee',
  'LV': 'lv',
  'LT': 'lt',
  'GR': 'gr',
  'IE': 'ie',
  'SG': 'sg',
  'IN': 'in',
  'AU': 'au',
  'CN': 'cn',
  'BN': 'bn',
  'JP': 'jp',
  'HK': 'hk',
  'MO': 'mo',
  'MV': 'mv',
  'MY': 'my',
  'IR': 'ir',
  'LY': 'ly',
  'PT': 'pt',
  'RO': 'ro',
  'CY': 'cy',
  'SK': 'sk',
  'BG': 'bg',
  'SI': 'si',
  'AE': 'ae',
  'GH': 'gh',
  'GI': 'gi',
  'GW': 'gw',
  'IS': 'is',
  'JE': 'je',
  'LI': 'li',
  'MC': 'mc',
  'MT': 'mt',
  'QA': 'qa',
  'DO': 'do',
  'GP': 'gp',
  'MQ': 'mq',
  'PR': 'pr',
  'TT': 'tt',
} as const;
export type CountryType = typeof Country;
export type CountryValueType = CountryType[keyof CountryType];

export const Affiliation = {
  'WEBSTORE_EUR': 'webstore-eur',
  'WEBSTORE_USD': 'webstore-usd',
  'WEBSTORE_GPB': 'webstore-gpb',
  'WEBSTORE_CAD': 'webstore-cad',
  'WEBSTORE_PLN': 'webstore-pln',
  'WEBSTORE_AUD': 'webstore-aud',
  'WEBSTORE_SEK': 'webstore-sek',
  'WEBSTORE_CHF': 'webstore-chf',
  'WEBSTORE_DKK': 'webstore-dkk',
  'WEBSTORE_AED': 'webstore-aed',
  'WEBSTORE_NOK': 'webstore-nok',
  'WEBSTORE_CNY': 'webstore-cny',
  'WEBSTORE_SGD': 'webstore-sgd',
  'WEBSTORE_HKD': 'webstore-hkd',
} as const;
export type AffiliationType = typeof Affiliation;
export type AffiliationValueType = AffiliationType[keyof AffiliationType];

export const Brand = {
  'SUITSUPPLY': 'suitsupply',
} as const;
export type BrandType = typeof Brand;
export type BrandValueType = BrandType[keyof BrandType];

export const SsMedium = {
  'BT_PANEL': 'bt_panel',
  'CS_PANEL': 'cs_panel',
} as const;
export type SsMediumType = typeof SsMedium;
export type SsMediumValueType = SsMediumType[keyof SsMediumType];

export const PageType = {
  'HOME': 'home',
  'PRODUCT': 'product',
  'CATEGORY': 'category',
  'JOURNAL': 'journal',
  'STORE': 'store',
  'LOOKBUILDER': 'lookbuilder',
  'LOGIN': 'login',
  'WISHLIST': 'wishlist',
  'ACCOUNT': 'account',
  'CHECKOUT': 'checkout',
  'CART': 'cart',
  'SUPPORT': 'support',
  'BLACK_TIE_CONFIGURATOR': 'black-tie-configurator',
  'CUSTOMMADE': 'custommade',
  'GIFTCARD': 'giftcard',
  'ERROR': 'error',
} as const;
export type PageTypeType = typeof PageType;
export type PageTypeValueType = PageTypeType[keyof PageTypeType];

export const Currency = {
  'EUR': 'eur',
  'USD': 'usd',
  'CNY': 'cny',
  'AUD': 'aud',
  'BGN': 'bgn',
  'CAD': 'cad',
  'CZK': 'czk',
  'DKK': 'dkk',
  'HKD': 'hkd',
  'HUF': 'huf',
  'ISK': 'isk',
  'INR': 'inr',
  'JPY': 'jpy',
  'CHF': 'chf',
  'MOP': 'mop',
  'MYR': 'myr',
  'NOK': 'nok',
  'QAR': 'qar',
  'RON': 'ron',
  'SGD': 'sgd',
  'SEK': 'sek',
  'AED': 'aed',
  'GBP': 'gbp',
} as const;
export type CurrencyType = typeof Currency;
export type CurrencyValueType = CurrencyType[keyof CurrencyType];

export const Creative = {
  'HOMEPAGE_ADBLOCK': 'homepage_adblock',
  'HOMEPAGE_RELATED_ARTICLE': 'homepage_related-article',
  'HOMEPAGE_USP': 'homepage_usp',
  'HOMEPAGE_TEXTLINK': 'homepage_textlink',
  'HOMEPAGE_SEOBLOCK': 'homepage_seoblock',
  'FOOTER_LINK': 'footer_link',
  'FOOTER_USP': 'footer_usp',
  'FOOTER_PANEL_SA': 'footer_panel-SA',
  'PLP_HEADER': 'plp_header',
  'PLP_ADBLOCK': 'plp_adblock',
  'PLP_WIDGET': 'plp_widget',
  'JOURNAL_HUB_RELATED_ARTICLES': 'journal-hub_related-articles',
  'JOURNAL_HUB_ADBLOCK': 'journal-hub_adblock',
  'JOURNAL_HUB_HEADER': 'journal-hub_header',
  'JOURNAL_BUTTONLINK': 'journal_buttonlink',
  'JOURNAL_ADBLOCK': 'journal_adblock',
  'JOURNAL_TEXTLINK': 'journal_textlink',
  'SHOPTHELOOK_USP': 'shopthelook_usp',
  'PDP_ACCORDION': 'pdp_accordion',
  'PDP_EMBEDDED_ARTICLE': 'pdp_embedded-article',
  'PDP_USP': 'pdp_usp',
  'PDP_RELATED_ARTICLES': 'pdp_related-articles',
  'PDP_BUTTONLINK': 'pdp_buttonlink',
  'PDP_ICONLINK_MWTW': 'pdp_iconlink-MWTW',
  'PDP_PANEL': 'pdp_panel',
  'PDP_BUTTONLINK_MWTW': 'pdp_buttonlink-MWTW',
  'PDP_USP_MWTW': 'pdp_usp-MWTW',
  'PDP_PANEL_MWTW': 'pdp_panel-MWTW',
  'PDP_PANEL_SA': 'pdp_panel-SA',
  'STORE_TEXTLINK': 'store_textlink',
  'STORE_ADBLOCK': 'store_adblock',
  'STORE_FAQLINK': 'store_faqlink',
  'STORE_OVERVIEW_TEXTLINK': 'store-overview_textlink',
  'STORE_SEARCH_TEXTLINK': 'store-search_textlink',
  'STORE_SEARCH_SLIDER_TEXTLINK': 'store-search_slider-textlink',
  'STORE_SEARCH_ADBLOCK': 'store-search_adblock',
} as const;
export type CreativeType = typeof Creative;
export type CreativeValueType = CreativeType[keyof CreativeType];

export const Variant = {
  'XXL': 'xxl',
  'XL': 'xl',
  'L': 'l',
  'M': 'm',
  'S': 's',
  'XS': 'xs',
  '98': '98',
  '95': '95',
  '94': '94',
  '90': '90',
  '9_5': '9.5',
  '9': '9',
  '85': '85',
  '8_5': '8.5',
  '8': '8',
  '75': '75',
  '7_5': '7.5',
  '7': '7',
  'PHYSICAL': 'physical',
  'ELECTRONIC': 'electronic',
  '62': '62',
  '60': '60',
  '6_5': '6.5',
  '6': '6',
  '58': '58',
  '56S': '56s',
  '56': '56',
  '54': '54',
  '52S': '52s',
  '52L': '52l',
  '52': '52',
  '50': '50',
  '5': '5',
  '48S': '48s',
  '48L': '48l',
  '48': '48',
  '47L': '47l',
  '47S': '47s',
  '47': '47',
  '46S': '46s',
  '46L': '46l',
  '46': '46',
  '45_46': '45/46',
  '45': '45',
  '44S': '44s',
  '44L': '44l',
  '44': '44',
  '43L_44L': '43l/44l',
  '43_44': '43/44',
  '43L': '43l',
  '43_46': '43-46',
  '43': '43',
  '42S': '42s',
  '42L': '42l',
  '42': '42',
  '41L_42L': '41l/42l',
  '41_42': '41/42',
  '41L': '41l',
  '41': '41',
  '40S': '40s',
  '40L': '40l',
  '40_7': '40-7',
  '40': '40',
  '39L_40L': '39l/40l',
  '39_40': '39/40',
  '39L': '39l',
  '39_7': '39-7',
  '39_42': '39-42',
  '39': '39',
  '38S': '38s',
  '38L': '38l',
  '38_7': '38-7',
  '38': '38',
  '37_38': '37/38',
  '37S': '37s',
  '37L': '37l',
  '37': '37',
  '36S': '36s',
  '36L': '36l',
  '36_34': '36/34',
  '36': '36',
  '35_36': '35/36',
  '35_34': '35/34',
  '35': '35',
  '34S': '34s',
  '34L': '34l',
  '34_34': '34/34',
  '34_32': '34/32',
  '34': '34',
  '33_34': '33/34',
  '33_32': '33/32',
  '32S': '32s',
  '32L': '32l',
  '32_34': '32/34',
  '32_32': '32/32',
  '32': '32',
  '31_34': '31/34',
  '31_32': '31/32',
  '30S': '30s',
  '30L': '30l',
  '30_32': '30/32',
  '30': '30',
  '29_32': '29/32',
  '29': '29',
  '28': '28',
  '27': '27',
  '26': '26',
  '25': '25',
  '24': '24',
  '23': '23',
  '22': '22',
  '19': '19',
  '18_1_2': '18 1/2',
  '18': '18',
  '17L': '17l',
  '17_3_4L': '17 3/4l',
  '18_1_2S': '18 1/2s',
  '17_1_2L': '17 1/2l',
  '17_1_2': '17 1/2',
  '17': '17',
  '16L': '16l',
  '16_1_2': '16 1/2',
  '16': '16',
  '15_3_4': '15 3/4',
  '15_1_2L': '15 1/2l',
  '15_1_2': '15 1/2',
  '15': '15',
  '14_1_2S': '14 1/2s',
  '14_1_2': '14 1/2',
  '14': '14',
  '13': '13',
  '12': '12',
  '118': '118',
  '114': '114',
  '110': '110',
  '11': '11',
  '106': '106',
  '105': '105',
  '102': '102',
  '10_5': '10.5',
  '10': '10',
} as const;
export type VariantType = typeof Variant;
export type VariantValueType = VariantType[keyof VariantType];

let Segment: any;

export function initAvo(options: {env: AvoEnv; webDebugger?: boolean;
  webDebuggerOptions?: webDebuggerOptions; strict?: boolean; noop?: boolean;
  reportFailureAs?: 'error' | 'warn' | 'log'; inspector?: AvoInspector;
  avoLogger?: AvoLogger}, destinationOptions: any,
  SegmentDestination: CustomDestination) {
  if (__AVO_ENV__ !== null) {
    return;
  }
  __AVO_ENV__ = options.env;
  if (options.avoLogger !== undefined) {
    __AVO_LOGGER__ = options.avoLogger;
  }
  if (options.noop === true) {
    __AVO_NOOP__ = true;
  }
  if (__AVO_NOOP__ && __AVO_ENV__ == AvoEnv.Prod) {
    InternalAvoLogger.warn("[avo] ****************************************************");
    InternalAvoLogger.warn("[avo] WARNING Avo cannot be initialized in noop mode in production:");
    InternalAvoLogger.warn("[avo] - Overwriting configuration with noop=false.");
    InternalAvoLogger.warn("[avo] - Please reach out if you want to be able to run Avo in production mode with noop=true");
    InternalAvoLogger.warn("[avo] ****************************************************");
    __AVO_NOOP__ = false;
  }
  if (__AVO_NOOP__) {
    InternalAvoLogger.log("[avo] ****************************************************");
    InternalAvoLogger.log("[avo] Avo is now initialized in noop mode. This means:");
    InternalAvoLogger.log("[avo] - No events will be sent");
    InternalAvoLogger.log("[avo] - No network requests are made");
    InternalAvoLogger.log("[avo] ****************************************************");
  }
  if (options.strict !== undefined) {
    __STRICT__ = options.strict !== false;
  }
  if (options.reportFailureAs !== undefined) {
    __REPORT_FAILURE_AS__ = options.reportFailureAs;
  }
  __WEB_DEBUGGER__ = !__AVO_NOOP__ && ((typeof window !== 'undefined' && (window as any).location.search.indexOf("avo_debug=1") > -1) || (options.webDebugger !== false && __AVO_ENV__ !== AvoEnv.Prod));
  if (!__AVO_NOOP__ && options.inspector !== undefined) {
    __INSPECTOR__ = options.inspector;
  } else if (__AVO_ENV__ !== 'prod') {
    InternalAvoLogger.warn("[avo] Avo Inspector not provided in initAvo() call");
  }

  destinationOptions = destinationOptions || {};

  if (__WEB_DEBUGGER__ && !__AVO_NOOP__) {
    if (options.webDebuggerOptions?.position) {
      _avo_debugger_send_position(options.webDebuggerOptions.position)
    }

(function() {
  if (typeof (window as any) === 'undefined') { return; }
  let init = function() {
    let iframe: any = document.createElement("iframe");
    document.body.appendChild(iframe);
    iframe.id = "avo-debugger";
    iframe.src = "https://www.avo.app/_debugger";
    iframe.style = "display: none;";
  };

  if (document.body) {
    init();
  } else {
    document.addEventListener('DOMContentLoaded', init);
  }
})();

  }
  if (!__AVO_NOOP__) {
    if (__AVO_ENV__ === AvoEnv.Prod) {
    }
    if (__AVO_ENV__ === AvoEnv.Dev) {
    }
    if (__AVO_ENV__ === AvoEnv.Staging) {
    }

    Segment = SegmentDestination;
    if (__AVO_ENV__ === 'prod') {
      Segment && Segment.make && Segment.make(__AVO_ENV__, null);
    } else if (__AVO_ENV__ === 'dev') {
      Segment && Segment.make && Segment.make(__AVO_ENV__, null);
    } else {
      Segment && Segment.make && Segment.make(__AVO_ENV__, null);
    }
    if (__AVO_ENV__ === AvoEnv.Dev) {
      // debug console in Avo
      _avo_invoke_meta(__AVO_ENV__, 'init', [], 'init');
    }
  }
}

function assertPrice(price: number, _label?: string) {
  let messages: AvoAssertMessage[] = [];
  messages = messages.concat(AvoAssert.assertFloat("5RMsvPEmT", _label ? "price" + ': ' + _label : "price", price));
  messages = messages.concat(AvoAssert.assertMin("5RMsvPEmT", _label ? "price" + ": " + _label : "price", 0.000000, price));
  return messages;
}

function assertValue(value: number, _label?: string) {
  let messages: AvoAssertMessage[] = [];
  messages = messages.concat(AvoAssert.assertFloat("Kddfsr3Xx", _label ? "value" + ': ' + _label : "value", value));
  messages = messages.concat(AvoAssert.assertMin("Kddfsr3Xx", _label ? "value" + ": " + _label : "value", 0.000000, value));
  return messages;
}

function assertProductsCart(productsCart: ProductsCart[], _label?: string) {
  let messages: AvoAssertMessage[] = [];
  messages = messages.concat(AvoAssert.assertList("NbRKFviNt", "products_cart", productsCart));
  if (productsCart !== null && productsCart !== undefined && productsCart.forEach) {
    productsCart.forEach(function (value, index) {
      messages = messages.concat(AvoAssert.assertObject("NbRKFviNt", "item at index " + index + " in products_cart", value));
      messages = messages.concat(assertAmount(value.amount, "item at index " + index + " in products_cart"));
      messages = messages.concat(assertQuantity(value.quantity, "item at index " + index + " in products_cart"));
    });
  }
  return messages;
}

function assertAmount(amount: number, _label?: string) {
  let messages: AvoAssertMessage[] = [];
  messages = messages.concat(AvoAssert.assertFloat("Vk6lWRKl5", _label ? "amount" + ': ' + _label : "amount", amount));
  messages = messages.concat(AvoAssert.assertMin("Vk6lWRKl5", _label ? "amount" + ": " + _label : "amount", 0.000000, amount));
  return messages;
}

function assertQuantity(quantity: number, _label?: string) {
  let messages: AvoAssertMessage[] = [];
  messages = messages.concat(AvoAssert.assertInt("fg1kaNXr_", _label ? "quantity" + ': ' + _label : "quantity", quantity));
  messages = messages.concat(AvoAssert.assertMin("fg1kaNXr_", _label ? "quantity" + ": " + _label : "quantity", 1, quantity));
  return messages;
}

function assertPosition(position: number, _label?: string) {
  let messages: AvoAssertMessage[] = [];
  messages = messages.concat(AvoAssert.assertInt("pBPbnpdFj", _label ? "position" + ': ' + _label : "position", position));
  messages = messages.concat(AvoAssert.assertMin("pBPbnpdFj", _label ? "position" + ": " + _label : "position", 1, position));
  return messages;
}

function assertContextOptional(context: Context | null | undefined,
  _label?: string) {
  let messages: AvoAssertMessage[] = [];
  if (context !== undefined && context !== null) {
    messages = messages.concat(AvoAssert.assertObject("z9n_7LHRQ", _label ? "context" + ': ' + _label : "context", context));
  }
  return messages;
}

function assertContext(context: Context, _label?: string) {
  let messages: AvoAssertMessage[] = [];
  messages = messages.concat(AvoAssert.assertObject("z9n_7LHRQ", _label ? "context" + ': ' + _label : "context", context));
  return messages;
}

export function setAvoLogger(avoLogger: AvoLogger | null) {
  __AVO_LOGGER__ = avoLogger;
}

export interface ProductClickedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  listId: ListIdValueType;
  itemListName: ItemListNameValueType;
  productId: string;
  category: CategoryValueType;
  itemCategory2: string;
  itemCategory3: string;
  itemCategory4: string;
  itemCategory5: string;
  affiliation: AffiliationValueType;
  name: string;
  variant: VariantValueType;
  price: number;
  quantity: number;
  position: number;
  value: number;
  imageUrl: string;
  onlineMaterial: string | null | undefined;
  fitId: string | null | undefined;
  plpGridImages: PlpGridImagesValueType;
  shopTheLookId: string;
  cartId: string;
  mixAndMatch: MixAndMatchValueType;
  productSetId: string;
  sku: string;
}
/**
 * Product Clicked: When clicking on a product to go to PLP, or in a panel when clicking on 'select size' When a product is shown in the viewport

 *
 * When to trigger this event:
 * 1. When clicking on a product on a PLP
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kHvR74th3/trigger/hFTLKlhB8
 * 2. When clicking on a product on a PDP in the 'You Might Also Like' carousel.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kHvR74th3/trigger/uc6_I1PJe
 * 3. When clicking on 'Select Size' in the 'Shop the Look' panel
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kHvR74th3/trigger/2eMjubKrf
 * 4. When clicking on a product on a Journal
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kHvR74th3/trigger/cWUk2zzqA
 * 5. When clicking on a product on the store locator page
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kHvR74th3/trigger/Bpf-If4w-
 * 6. When clicking on a product on a store detail page
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kHvR74th3/trigger/D-ioHoDIM
 * 7. When clicking on 'shop giftcard' button, on the Giftcard landing page
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kHvR74th3/trigger/ecFszVd66
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.listId: This describes the listname + unique location

for custommade it's: custom-made
 * @param properties.itemListName: Name of list where products are shown

For custommade, it's 'custom made'
 * @param properties.productId: SKU of product

for custommade:
trousers: dyo-trousers
jacket: dyo-jacket
waistcoat: dyo-waistcoat
coat: dyo-coat
shirt: dyo-shirt
 * @param properties.category: Product Category
 * @param properties.itemCategory2: no description
 * @param properties.itemCategory3: no description
 * @param properties.itemCategory4: no description
 * @param properties.itemCategory5: no description
 * @param properties.affiliation: This should be webstore-{{currencycode lowercase}}
 * @param properties.name: Name of product as listed in Salesforce, english only, lowercase
Will be gift card for giftcard

for custommade:
trousers: dyo-trousers
jacket: dyo-jacket
waistcoat: dyo-waistcoat
coat: dyo-coat
shirt: dyo-shirt
 * @param properties.variant: Should return size for all products except giftcard. For Giftcard should return 'physical' or 'electronic'
 * @param properties.price: Price of single product
 * @param properties.quantity: Amount of products added to cart
 * @param properties.position: Position of product, should always start with 1
 * @param properties.value: Price * Quantity
 * @param properties.imageUrl: URL of shown image/hero of product
Can sometimes be different from viewport url
 * @param properties.onlineMaterial: Material of product
 * @param properties.fitId: no description
 * @param properties.plpGridImages: The view of the product on PLP, how many products per row, and how many pictures if 1 item is shown on a row.
 * @param properties.shopTheLookId: This describes the shop the look id, if available
 * @param properties.cartId: Cart ID of customer
 * @param properties.mixAndMatch: Should return 'true' or 'false'
 * @param properties.productSetId: Product Set Id when product is mix and match
 * @param properties.sku: SKU of product, same as product_id
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kHvR74th3}
 */
export function productClicked(properties: ProductClickedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "Ygy1AgJzJ", name: "list_id", value: properties.listId});
  eventPropertiesArray.push({id: "6NzVmVGcY", name: "item_list_name", value: properties.itemListName});
  eventPropertiesArray.push({id: "RmqMZ4ONr", name: "product_id", value: properties.productId});
  eventPropertiesArray.push({id: "IiKR7dr0F", name: "category", value: properties.category});
  eventPropertiesArray.push({id: "sQMBHWFY_", name: "item_category2", value: properties.itemCategory2});
  eventPropertiesArray.push({id: "JieId3fKm", name: "item_category3", value: properties.itemCategory3});
  eventPropertiesArray.push({id: "5vOpX9hBs", name: "item_category4", value: properties.itemCategory4});
  eventPropertiesArray.push({id: "AtqbQIXpb", name: "item_category5", value: properties.itemCategory5});
  eventPropertiesArray.push({id: "c5sqtMlHz", name: "affiliation", value: properties.affiliation});
  eventPropertiesArray.push({id: "A8Oa9tHEe", name: "name", value: properties.name});
  eventPropertiesArray.push({id: "rNNvglLqV", name: "variant", value: properties.variant});
  eventPropertiesArray.push({id: "5RMsvPEmT", name: "price", value: properties.price});
  eventPropertiesArray.push({id: "fg1kaNXr_", name: "quantity", value: properties.quantity});
  eventPropertiesArray.push({id: "pBPbnpdFj", name: "position", value: properties.position});
  eventPropertiesArray.push({id: "Kddfsr3Xx", name: "value", value: properties.value});
  eventPropertiesArray.push({id: "EmHDBRDoN", name: "image_url", value: properties.imageUrl});
  properties.onlineMaterial !== undefined && properties.onlineMaterial !== null ?
    eventPropertiesArray.push({id: "h_-BHBawq", name: "online_material", value: properties.onlineMaterial}) :
    eventPropertiesArray.push({id: "h_-BHBawq", name: "online_material", value: null});
  properties.fitId !== undefined && properties.fitId !== null ?
    eventPropertiesArray.push({id: "SfqMYUwv4", name: "fit_id", value: properties.fitId}) :
    eventPropertiesArray.push({id: "SfqMYUwv4", name: "fit_id", value: null});
  eventPropertiesArray.push({id: "D8L1_0pcs", name: "plp_grid_images", value: properties.plpGridImages});
  eventPropertiesArray.push({id: "vPAMuxU06", name: "shop_the_look_id", value: properties.shopTheLookId});
  eventPropertiesArray.push({id: "14smmnfJh", name: "cart_id", value: properties.cartId});
  eventPropertiesArray.push({id: "3YGdl5qO_", name: "mix_and_match", value: properties.mixAndMatch});
  eventPropertiesArray.push({id: "kjpadIQOI", name: "product_set_id", value: properties.productSetId});
  eventPropertiesArray.push({id: "Yf36kEtqN", name: "sku", value: properties.sku});
  eventPropertiesArray.push({id: "cAQamFkP_", name: "brand", value: "suitsupply"});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    messages = messages.concat(assertPrice(properties.price));
    messages = messages.concat(assertQuantity(properties.quantity));
    messages = messages.concat(assertPosition(properties.position));
    messages = messages.concat(assertValue(properties.value));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "kHvR74th3", "63ae7ca9ccae375ea2571c0307a5f4e17bce4b88665bffae422c980988b251e9", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("Product Clicked", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("kHvR74th3", "Product Clicked", messages, eventPropertiesArray, userPropertiesArray, []);
    }
    // @ts-ignore
    if (__AVO_ENV__ !== AvoEnv.Prod && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Product Clicked': " + messages[0]!.message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Product Clicked", eventProperties, "kHvR74th3", "63ae7ca9ccae375ea2571c0307a5f4e17bce4b88665bffae422c980988b251e9");
    }
    // destination Segment
    Segment.logEvent("Product Clicked", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface ProductViewedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  listId: ListIdValueType;
  itemListName: ItemListNameValueType;
  productId: string;
  category: CategoryValueType;
  itemCategory2: string;
  itemCategory3: string;
  itemCategory4: string;
  itemCategory5: string;
  affiliation: AffiliationValueType;
  name: string;
  variant: VariantValueType | null | undefined;
  price: number;
  quantity: number;
  position: number;
  value: number;
  imageUrl: string;
  onlineMaterial: string | null | undefined;
  fitId: string | null | undefined;
  plpGridImages: PlpGridImagesValueType;
  shopTheLookId: string;
  cartId: string;
  mixAndMatch: MixAndMatchValueType;
  productSetId: string;
  sku: string;
}
/**
 * Product Viewed: When landing an a PDP, or clicking on 'select size' in panel

 *
 * When to trigger this event:
 * 1. When clicking on 'Select Size' in the 'Shop the Look' panel
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4a040kO3L/trigger/biZR2zvCbF
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.listId: This describes the listname + unique location

for custommade it's: custom-made
 * @param properties.itemListName: Name of list where products are shown

For custommade, it's 'custom made'
 * @param properties.productId: SKU of product

for custommade:
trousers: dyo-trousers
jacket: dyo-jacket
waistcoat: dyo-waistcoat
coat: dyo-coat
shirt: dyo-shirt
 * @param properties.category: Product Category
 * @param properties.itemCategory2: no description
 * @param properties.itemCategory3: no description
 * @param properties.itemCategory4: no description
 * @param properties.itemCategory5: no description
 * @param properties.affiliation: This should be webstore-{{currencycode lowercase}}
 * @param properties.name: Name of product as listed in Salesforce, english only, lowercase
Will be gift card for giftcard

for custommade:
trousers: dyo-trousers
jacket: dyo-jacket
waistcoat: dyo-waistcoat
coat: dyo-coat
shirt: dyo-shirt
 * @param properties.variant: Should return size for all products except giftcard. For Giftcard should return 'physical' or 'electronic'
 * @param properties.price: Price of single product
 * @param properties.quantity: Amount of products added to cart
 * @param properties.position: Position of product, should always start with 1
 * @param properties.value: Price * Quantity
 * @param properties.imageUrl: URL of shown image/hero of product
Can sometimes be different from viewport url
 * @param properties.onlineMaterial: Material of product
 * @param properties.fitId: no description
 * @param properties.plpGridImages: The view of the product on PLP, how many products per row, and how many pictures if 1 item is shown on a row.
 * @param properties.shopTheLookId: This describes the shop the look id, if available
 * @param properties.cartId: Cart ID of customer
 * @param properties.mixAndMatch: Should return 'true' or 'false'
 * @param properties.productSetId: Product Set Id when product is mix and match
 * @param properties.sku: SKU of product, same as product_id
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4a040kO3L}
 */
export function productViewed(properties: ProductViewedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "Ygy1AgJzJ", name: "list_id", value: properties.listId});
  eventPropertiesArray.push({id: "6NzVmVGcY", name: "item_list_name", value: properties.itemListName});
  eventPropertiesArray.push({id: "RmqMZ4ONr", name: "product_id", value: properties.productId});
  eventPropertiesArray.push({id: "IiKR7dr0F", name: "category", value: properties.category});
  eventPropertiesArray.push({id: "sQMBHWFY_", name: "item_category2", value: properties.itemCategory2});
  eventPropertiesArray.push({id: "JieId3fKm", name: "item_category3", value: properties.itemCategory3});
  eventPropertiesArray.push({id: "5vOpX9hBs", name: "item_category4", value: properties.itemCategory4});
  eventPropertiesArray.push({id: "AtqbQIXpb", name: "item_category5", value: properties.itemCategory5});
  eventPropertiesArray.push({id: "c5sqtMlHz", name: "affiliation", value: properties.affiliation});
  eventPropertiesArray.push({id: "A8Oa9tHEe", name: "name", value: properties.name});
  properties.variant !== undefined && properties.variant !== null ?
    eventPropertiesArray.push({id: "rNNvglLqV", name: "variant", value: properties.variant}) :
    eventPropertiesArray.push({id: "rNNvglLqV", name: "variant", value: null});
  eventPropertiesArray.push({id: "5RMsvPEmT", name: "price", value: properties.price});
  eventPropertiesArray.push({id: "fg1kaNXr_", name: "quantity", value: properties.quantity});
  eventPropertiesArray.push({id: "pBPbnpdFj", name: "position", value: properties.position});
  eventPropertiesArray.push({id: "Kddfsr3Xx", name: "value", value: properties.value});
  eventPropertiesArray.push({id: "EmHDBRDoN", name: "image_url", value: properties.imageUrl});
  properties.onlineMaterial !== undefined && properties.onlineMaterial !== null ?
    eventPropertiesArray.push({id: "h_-BHBawq", name: "online_material", value: properties.onlineMaterial}) :
    eventPropertiesArray.push({id: "h_-BHBawq", name: "online_material", value: null});
  properties.fitId !== undefined && properties.fitId !== null ?
    eventPropertiesArray.push({id: "SfqMYUwv4", name: "fit_id", value: properties.fitId}) :
    eventPropertiesArray.push({id: "SfqMYUwv4", name: "fit_id", value: null});
  eventPropertiesArray.push({id: "D8L1_0pcs", name: "plp_grid_images", value: properties.plpGridImages});
  eventPropertiesArray.push({id: "vPAMuxU06", name: "shop_the_look_id", value: properties.shopTheLookId});
  eventPropertiesArray.push({id: "14smmnfJh", name: "cart_id", value: properties.cartId});
  eventPropertiesArray.push({id: "3YGdl5qO_", name: "mix_and_match", value: properties.mixAndMatch});
  eventPropertiesArray.push({id: "kjpadIQOI", name: "product_set_id", value: properties.productSetId});
  eventPropertiesArray.push({id: "Yf36kEtqN", name: "sku", value: properties.sku});
  eventPropertiesArray.push({id: "cAQamFkP_", name: "brand", value: "suitsupply"});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    messages = messages.concat(assertPrice(properties.price));
    messages = messages.concat(assertQuantity(properties.quantity));
    messages = messages.concat(assertPosition(properties.position));
    messages = messages.concat(assertValue(properties.value));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "4a040kO3L", "8e1195fee68c4089abaf6d1db71e72d27b70e7c377d532bb94f7a2c10e9aaacf", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("Product Viewed", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("4a040kO3L", "Product Viewed", messages, eventPropertiesArray, userPropertiesArray, []);
    }
    // @ts-ignore
    if (__AVO_ENV__ !== AvoEnv.Prod && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Product Viewed': " + messages[0]!.message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Product Viewed", eventProperties, "4a040kO3L", "8e1195fee68c4089abaf6d1db71e72d27b70e7c377d532bb94f7a2c10e9aaacf");
    }
    // destination Segment
    Segment.logEvent("Product Viewed", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface ProductAddedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  listId: ListIdValueType;
  itemListName: ItemListNameValueType;
  productId: string;
  category: CategoryValueType;
  itemCategory2: string;
  itemCategory3: string;
  itemCategory4: string;
  itemCategory5: string;
  affiliation: AffiliationValueType;
  name: string;
  variant: VariantValueType;
  price: number;
  quantity: number;
  position: number;
  value: number;
  imageUrl: string;
  onlineMaterial: string | null | undefined;
  fitId: string | null | undefined;
  plpGridImages: PlpGridImagesValueType;
  shopTheLookId: string;
  productsCart: ProductsCart[];
  cartId: string;
  mixAndMatch: MixAndMatchValueType;
  productSetId: string;
  context: Context | null | undefined;
  sku: string;
}
/**
 * Product Added: When clicking on 'add to bag' on a PDP, panel or increasing value on the cart page.
for Custommade: when clicking on 'add to bag' on the summary screen.
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.listId: This describes the listname + unique location

for custommade it's: custom-made
 * @param properties.itemListName: Name of list where products are shown

For custommade, it's 'custom made'
 * @param properties.productId: SKU of product

for custommade:
trousers: dyo-trousers
jacket: dyo-jacket
waistcoat: dyo-waistcoat
coat: dyo-coat
shirt: dyo-shirt
 * @param properties.category: Product Category
 * @param properties.itemCategory2: no description
 * @param properties.itemCategory3: no description
 * @param properties.itemCategory4: no description
 * @param properties.itemCategory5: no description
 * @param properties.affiliation: This should be webstore-{{currencycode lowercase}}
 * @param properties.name: Name of product as listed in Salesforce, english only, lowercase
Will be gift card for giftcard

for custommade:
trousers: dyo-trousers
jacket: dyo-jacket
waistcoat: dyo-waistcoat
coat: dyo-coat
shirt: dyo-shirt
 * @param properties.variant: Should return size for all products except giftcard. For Giftcard should return 'physical' or 'electronic'
 * @param properties.price: Price of single product
 * @param properties.quantity: Amount of products added to cart
 * @param properties.position: Position of product, should always start with 1
 * @param properties.value: Price * Quantity
 * @param properties.imageUrl: URL of shown image/hero of product
Can sometimes be different from viewport url
 * @param properties.onlineMaterial: Material of product
 * @param properties.fitId: no description
 * @param properties.plpGridImages: The view of the product on PLP, how many products per row, and how many pictures if 1 item is shown on a row.
 * @param properties.shopTheLookId: This describes the shop the look id, if available
 * @param properties.productsCart: Previously known ssm_products. Should contain an array of all products in the cart. Needs to be cleared on the 'Order Completed' event.
 * @param properties.cartId: Cart ID of customer
 * @param properties.mixAndMatch: Should return 'true' or 'false'
 * @param properties.productSetId: Product Set Id when product is mix and match
 * @param properties.context: no description
 * @param properties.sku: SKU of product, same as product_id
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/0mNPEK9jV}
 */
export function productAdded(properties: ProductAddedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "Ygy1AgJzJ", name: "list_id", value: properties.listId});
  eventPropertiesArray.push({id: "6NzVmVGcY", name: "item_list_name", value: properties.itemListName});
  eventPropertiesArray.push({id: "RmqMZ4ONr", name: "product_id", value: properties.productId});
  eventPropertiesArray.push({id: "IiKR7dr0F", name: "category", value: properties.category});
  eventPropertiesArray.push({id: "sQMBHWFY_", name: "item_category2", value: properties.itemCategory2});
  eventPropertiesArray.push({id: "JieId3fKm", name: "item_category3", value: properties.itemCategory3});
  eventPropertiesArray.push({id: "5vOpX9hBs", name: "item_category4", value: properties.itemCategory4});
  eventPropertiesArray.push({id: "AtqbQIXpb", name: "item_category5", value: properties.itemCategory5});
  eventPropertiesArray.push({id: "c5sqtMlHz", name: "affiliation", value: properties.affiliation});
  eventPropertiesArray.push({id: "A8Oa9tHEe", name: "name", value: properties.name});
  eventPropertiesArray.push({id: "rNNvglLqV", name: "variant", value: properties.variant});
  eventPropertiesArray.push({id: "5RMsvPEmT", name: "price", value: properties.price});
  eventPropertiesArray.push({id: "fg1kaNXr_", name: "quantity", value: properties.quantity});
  eventPropertiesArray.push({id: "pBPbnpdFj", name: "position", value: properties.position});
  eventPropertiesArray.push({id: "Kddfsr3Xx", name: "value", value: properties.value});
  eventPropertiesArray.push({id: "EmHDBRDoN", name: "image_url", value: properties.imageUrl});
  properties.onlineMaterial !== undefined && properties.onlineMaterial !== null ?
    eventPropertiesArray.push({id: "h_-BHBawq", name: "online_material", value: properties.onlineMaterial}) :
    eventPropertiesArray.push({id: "h_-BHBawq", name: "online_material", value: null});
  properties.fitId !== undefined && properties.fitId !== null ?
    eventPropertiesArray.push({id: "SfqMYUwv4", name: "fit_id", value: properties.fitId}) :
    eventPropertiesArray.push({id: "SfqMYUwv4", name: "fit_id", value: null});
  eventPropertiesArray.push({id: "D8L1_0pcs", name: "plp_grid_images", value: properties.plpGridImages});
  eventPropertiesArray.push({id: "vPAMuxU06", name: "shop_the_look_id", value: properties.shopTheLookId});
  eventPropertiesArray.push({id: "NbRKFviNt", name: "products_cart", value: properties.productsCart.map(function(value) { return {
      "amount": value.amount,
      "identifier": value.identifier,
      "variation": value.variation,
      "currency": value.currency,
      "variant_id": value.variantId,
      "quantity": value.quantity,
    }
  })});
  eventPropertiesArray.push({id: "14smmnfJh", name: "cart_id", value: properties.cartId});
  eventPropertiesArray.push({id: "3YGdl5qO_", name: "mix_and_match", value: properties.mixAndMatch});
  eventPropertiesArray.push({id: "kjpadIQOI", name: "product_set_id", value: properties.productSetId});
  properties.context !== undefined && properties.context !== null ?
    eventPropertiesArray.push({id: "z9n_7LHRQ", name: "context", value: properties.context}) :
    eventPropertiesArray.push({id: "z9n_7LHRQ", name: "context", value: null});
  eventPropertiesArray.push({id: "Yf36kEtqN", name: "sku", value: properties.sku});
  eventPropertiesArray.push({id: "cAQamFkP_", name: "brand", value: "suitsupply"});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    messages = messages.concat(assertPrice(properties.price));
    messages = messages.concat(assertQuantity(properties.quantity));
    messages = messages.concat(assertPosition(properties.position));
    messages = messages.concat(assertValue(properties.value));
    messages = messages.concat(assertProductsCart(properties.productsCart));
    messages = messages.concat(assertContextOptional(properties.context));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "0mNPEK9jV", "20bd42813796f14f44d65d97aa99a7ff4bc88cf8a056af0bb9ac2bffc57082ef", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("Product Added", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("0mNPEK9jV", "Product Added", messages, eventPropertiesArray, userPropertiesArray, []);
    }
    // @ts-ignore
    if (__AVO_ENV__ !== AvoEnv.Prod && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Product Added': " + messages[0]!.message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Product Added", eventProperties, "0mNPEK9jV", "20bd42813796f14f44d65d97aa99a7ff4bc88cf8a056af0bb9ac2bffc57082ef");
    }
    // destination Segment
    Segment.logEvent("Product Added", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface PageLoadedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  customDestinationPageName_: string;
  localeVisited: string;
  title: string;
  path: string;
  referrer: string | null | undefined;
  productsCart: ProductsCart[];
}
/**
 * Page Loaded: When a page or a virtual page is loaded
for custommade: products_cart and referrer not needed
 *
 * When to trigger this event:
 * 1. black-tie-configurator page 1 (jacket):

url:

https://suitsupply.com/men/black-tie-package/mix-match-tuxedo


location_id:

https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/9SrE93l4D
 * 2. 2. black-tie-configurator page 2 (jacket):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/jacket

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/jacket

location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/jacket

Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/jacket
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/bjjJ9GC32
 * 3. 3.black-tie-configurator page 3 (trousers):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/trousers

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/trousers

location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/trousers

Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/trousers
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/9N-3rJX7w
 * 4. 4.black-tie-configurator page 4 (shirt):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/shirt

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/shirt

location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/shirt

Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/shirt
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/hRyZsTCWg
 * 5. 5.black-tie-configurator page 5 (shoes):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/shoes

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/shoes

location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/shoes

Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/shoes
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/SgNDh79wH
 * 6. 6.black-tie-configurator page 6 (bow-tie):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/bowtie

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/bowtie

location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/bowtie

Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/bowtie
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/fqSg1J0Lw
 * 7. 7.black-tie-configurator page 7 (cufflinks):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/cufflinks

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/cufflinks

location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/cufflinks

Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/cufflinks
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/bObRbcuk9
 * 8. 8.black-tie-configurator page 8 (suspenders):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/suspenders

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/suspenders

location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/suspenders

Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/suspenders
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/sW1aJ_pG0
 * 9. 9.black-tie-configurator page 9 (summary):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/summary

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/summary

location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/summary

Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/summary
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/dmE9uQLdg
 * 10. 1b.black-tie-configurator page 1b (jacket lapel):

url:

Two piece::
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/jacket/lapel

Three piece:
https://suitsupply.com/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/jacket/lapel


location_id:

Two piece::
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/two-piece-tuxedo/jacket/lapel


Three piece:
https://suitsupply.com/en-nl/men/black-tie-package/mix-match-tuxedo/three-piece-tuxedo/jacket/lapel
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/tfcaQfTbT
 * 11. Custommade Suits page 1:

url:
suitsupply.com/custommade/suit/fabric
location_id: suitsupply.com/en-nl/custommade/suit/fabric
title: "Select your fabric"
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/ilo2Fao9X
 * 12. Custommade Suits - jacket:

url:
suitsupply.com/custommade/suit/jacket
location_id: suitsupply.com/en-nl/custommade/suit/jacket
title: "Customize your jacket"
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/EJGPRxCWM
 * 13. Custommade Suits - jacket - Style:

url:
suitsupply.com/custommade/suit/jacket/style
location_id: suitsupply.com/en-nl/custommade/suit/jacket/style
title: customize your jacket style
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/8DnMiHdiv
 * 14. Custommade Suits - trousers - Style:

url:
suitsupply.com/custommade/suit/trousers/style
location_id: suitsupply.com/en-nl/custommade/suit/trousers/style
title: customize your trousers style
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/Y-U_FnScC
 * 15. Custommade Suits - trousers:

url:
suitsupply.com/custommade/suit/trousers
location_id: suitsupply.com/en-nl/custommade/suit/trousers
title: "Customize your trousers"
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/lDHJUY7uw
 * 16. Custommade Suits - Waistcoat:

url:
suitsupply.com/custommade/suit/waistcoat
location_id: suitsupply.com/en-nl/custommade/suit/waistcoat
title: "Customize your waistcoat"
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/hGYSO6MWH
 * 17. Custommade Suits - summary

url:
suitsupply.com/custommade/suit/summary/
location_id: suitsupply.com/en-nl/custommade/suit/summary/
title: "Your summary"
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226/trigger/tB6E44bgl
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.customDestinationPageName_: Name of the page or screen
 * @param properties.localeVisited: Locale visited, for example en-us or es-us
 * @param properties.title: Pagetitle, lowercase in native English
 * @param properties.path: Path portion of the page’s URL. Equivalent to canonical path which defaults to location.pathname from the DOM API.
 * @param properties.referrer: Previous page’s full URL. Equivalent to document.referrer from the DOM API.

 * @param properties.productsCart: Previously known ssm_products. Should contain an array of all products in the cart. Needs to be cleared on the 'Order Completed' event.
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4l0ZskS226}
 */
export function pageLoaded(properties: PageLoadedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "QSRXqGwpG", name: "locale_visited", value: properties.localeVisited});
  eventPropertiesArray.push({id: "PPpWWiUlN", name: "title", value: properties.title});
  eventPropertiesArray.push({id: "oWTNrOLzR", name: "path", value: properties.path});
  properties.referrer !== undefined && properties.referrer !== null ?
    eventPropertiesArray.push({id: "_ufgi4Bvc", name: "referrer", value: properties.referrer}) :
    eventPropertiesArray.push({id: "_ufgi4Bvc", name: "referrer", value: null});
  eventPropertiesArray.push({id: "NbRKFviNt", name: "products_cart", value: properties.productsCart.map(function(value) { return {
      "amount": value.amount,
      "identifier": value.identifier,
      "variation": value.variation,
      "currency": value.currency,
      "variant_id": value.variantId,
      "quantity": value.quantity,
    }
  })});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    messages = messages.concat(assertProductsCart(properties.productsCart));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "4l0ZskS226", "e5b750ded55dfa8c48d75ca14d3d6d9b2470264093433deb655aacb56b54127f", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("Page Loaded", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("4l0ZskS226", "Page Loaded", messages, eventPropertiesArray, userPropertiesArray, []);
    }
    // @ts-ignore
    if (__AVO_ENV__ !== AvoEnv.Prod && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Page Loaded': " + messages[0]!.message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }
  if (!__AVO_NOOP__) {
    // destination Segment
    if (Segment.logPage) {
      Segment.logPage(properties.customDestinationPageName_, (Object as any).assign({}, eventProperties));
    } else {
      InternalAvoLogger.error('Page method is not implemented in the destination', '');
    }
  } else {
    // do nothing
  }
}

export interface PromotionViewedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  promotionId: string;
  name: string;
  creative: CreativeValueType;
  position: number;
  ssMedium: SsMediumValueType | null | undefined;
  ssSource: string;
}
/**
 * Promotion Viewed: When a promotion is being shown in the viewport
Only add the 'products' object, if there are products in the promotion.

ss_source and ss_medium should only be filled for booking panel and SA panel

 *
 * When to trigger this event:
 * 1. Journal - Support

promotion_name and id:
delivery-time-cost_support
returns-refunds_support
secure-payments_support
custommade-customizing_app
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/Xo8CpcqD3k/trigger/dmF0VfnHj
 * 2. Footer - Newsletter

promotion_id & name:
newsletter_campaign

Creative:
footer_link
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/Xo8CpcqD3k/trigger/9dwfTm8_b
 * 3. creative: journal_adblock
promotion_id: black-tie-configurator-tuxedo_app
name: black-tie-configurator-tuxedo_app
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/Xo8CpcqD3k/trigger/wIqd9HpV3
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.promotionId: ID of promotion, is the same as promotion name
 * @param properties.name: Name of product as listed in Salesforce, english only, lowercase
Will be gift card for giftcard

for custommade:
trousers: dyo-trousers
jacket: dyo-jacket
waistcoat: dyo-waistcoat
coat: dyo-coat
shirt: dyo-shirt
 * @param properties.creative: Name of location and type of the promotion
 * @param properties.position: Position of product, should always start with 1
 * @param properties.ssMedium: To make sure utm tags are not overwriting the utm tags from ads, we want to make sure the BT entries are tracked with the ss_medium tag. Otherwise we are not able to track the costs per lead from our facebook or other campaigns.
 * @param properties.ssSource: To make sure utm tags are not overwriting the utm tags from ads, we want to make sure the BT entries are tracked with the ss_medium tag. Otherwise we are not able to track the costs per lead from our facebook or other campaigns.

For store pages: ss_source: store_{{storename}}
For store experience pages: ss_source: journal_{{journal name with “-” between words}}
for store custommade near me: ss_source: journal_store_{{journal name with “-“ between words + store parameter in new landing pages}}
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/Xo8CpcqD3k}
 */
export function promotionViewed(properties: PromotionViewedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "9zU3NBFWZ", name: "promotion_id", value: properties.promotionId});
  eventPropertiesArray.push({id: "A8Oa9tHEe", name: "name", value: properties.name});
  eventPropertiesArray.push({id: "oFjan4Q_Q", name: "creative", value: properties.creative});
  eventPropertiesArray.push({id: "pBPbnpdFj", name: "position", value: properties.position});
  properties.ssMedium !== undefined && properties.ssMedium !== null ?
    eventPropertiesArray.push({id: "dCzQ_0RdM", name: "ss_medium", value: properties.ssMedium}) :
    eventPropertiesArray.push({id: "dCzQ_0RdM", name: "ss_medium", value: null});
  eventPropertiesArray.push({id: "PBq0iEV4f", name: "ss_source", value: properties.ssSource});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: "ecommerce_interaction"});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    messages = messages.concat(assertPosition(properties.position));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "Xo8CpcqD3k", "7941a1e13976fe63c74c72c3ff084a9450dc5621ff27335320e51572af1cdc37", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("Promotion Viewed", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("Xo8CpcqD3k", "Promotion Viewed", messages, eventPropertiesArray, userPropertiesArray, []);
    }
    // @ts-ignore
    if (__AVO_ENV__ !== AvoEnv.Prod && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Promotion Viewed': " + messages[0]!.message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Promotion Viewed", eventProperties, "Xo8CpcqD3k", "7941a1e13976fe63c74c72c3ff084a9450dc5621ff27335320e51572af1cdc37");
    }
    // destination Segment
    Segment.logEvent("Promotion Viewed", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface PromotionClickedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  promotionId: string;
  name: string;
  creative: CreativeValueType;
  position: number;
  ssMedium: SsMediumValueType | null | undefined;
  ssSource: string;
  context: Context;
}
/**
 * Promotion Clicked: When a promotion is clicked

Only add the 'products' object, if there are products in the promotion.

ss_source and ss_medium should only be filled for booking panel and SA panel
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.promotionId: ID of promotion, is the same as promotion name
 * @param properties.name: Name of product as listed in Salesforce, english only, lowercase
Will be gift card for giftcard

for custommade:
trousers: dyo-trousers
jacket: dyo-jacket
waistcoat: dyo-waistcoat
coat: dyo-coat
shirt: dyo-shirt
 * @param properties.creative: Name of location and type of the promotion
 * @param properties.position: Position of product, should always start with 1
 * @param properties.ssMedium: To make sure utm tags are not overwriting the utm tags from ads, we want to make sure the BT entries are tracked with the ss_medium tag. Otherwise we are not able to track the costs per lead from our facebook or other campaigns.
 * @param properties.ssSource: To make sure utm tags are not overwriting the utm tags from ads, we want to make sure the BT entries are tracked with the ss_medium tag. Otherwise we are not able to track the costs per lead from our facebook or other campaigns.

For store pages: ss_source: store_{{storename}}
For store experience pages: ss_source: journal_{{journal name with “-” between words}}
for store custommade near me: ss_source: journal_store_{{journal name with “-“ between words + store parameter in new landing pages}}
 * @param properties.context: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/lb-B8o9Lf}
 */
export function promotionClicked(properties: PromotionClickedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "9zU3NBFWZ", name: "promotion_id", value: properties.promotionId});
  eventPropertiesArray.push({id: "A8Oa9tHEe", name: "name", value: properties.name});
  eventPropertiesArray.push({id: "oFjan4Q_Q", name: "creative", value: properties.creative});
  eventPropertiesArray.push({id: "pBPbnpdFj", name: "position", value: properties.position});
  properties.ssMedium !== undefined && properties.ssMedium !== null ?
    eventPropertiesArray.push({id: "dCzQ_0RdM", name: "ss_medium", value: properties.ssMedium}) :
    eventPropertiesArray.push({id: "dCzQ_0RdM", name: "ss_medium", value: null});
  eventPropertiesArray.push({id: "PBq0iEV4f", name: "ss_source", value: properties.ssSource});
  eventPropertiesArray.push({id: "z9n_7LHRQ", name: "context", value: properties.context});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: "ecommerce_interaction"});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    messages = messages.concat(assertPosition(properties.position));
    messages = messages.concat(assertContext(properties.context));
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "lb-B8o9Lf", "8576132bca6333f31d5ed03d591e831e8978b0893ccd782e935109ed711cdf3a", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("Promotion Clicked", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("lb-B8o9Lf", "Promotion Clicked", messages, eventPropertiesArray, userPropertiesArray, []);
    }
    // @ts-ignore
    if (__AVO_ENV__ !== AvoEnv.Prod && (__STRICT__ === null || __STRICT__)) {
      // throw exception if messages is not empty
      if (messages.length !== 0) {
        throw new Error("Error sending event 'Promotion Clicked': " + messages[0]!.message)
      }
    } else {
      messages.forEach(function(m) {
        console[__REPORT_FAILURE_AS__ || 'error']("[avo] " + m.message);
      });
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("Promotion Clicked", eventProperties, "lb-B8o9Lf", "8576132bca6333f31d5ed03d591e831e8978b0893ccd782e935109ed711cdf3a");
    }
    // destination Segment
    Segment.logEvent("Promotion Clicked", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface SelectSizeProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * select_size: When clicking the 'select size' button on PDP.

event_category:
If the event is happening on a journal page, the event_category will be plp_interactions, it's too much work for dev to create a specific journal_interactions.
For lookbuilder it will be lookbuilder_interactions


event_label: {{category}}_{{SKU}}

 *
 * When to trigger this event:
 * 1. When clicking on the 'select size' button
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/QZ8ruF0wR/trigger/K_ScJetAs
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/QZ8ruF0wR}
 */
export function selectSize(properties: SelectSizeProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "QZ8ruF0wR", "b2b2247d78064f4e550f85dba42a9b7863f65625fd149fff0d009ef9f6c62e2e", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("select_size", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("QZ8ruF0wR", "select_size", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("select_size", eventProperties, "QZ8ruF0wR", "b2b2247d78064f4e550f85dba42a9b7863f65625fd149fff0d009ef9f6c62e2e");
    }
    // destination Segment
    Segment.logEvent("select_size", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface SizeChangedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * size_changed: When selecting a size in the size panel

event_label: {{category}}_{{SKU}}

event_category:
If the event is happening on a journal page, the event_category will be plp_interactions, it's too much work for dev to create a specific journal_interactions.
For lookbuilder it will be lookbuilder_interactions

 *
 * When to trigger this event:
 * 1. When clicking on a size in the panel
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/FLODrHtrT/trigger/THklYHMK-
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/FLODrHtrT}
 */
export function sizeChanged(properties: SizeChangedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "FLODrHtrT", "aed429a4b5bd3d73a46fe6a87f9ecd3bf3869398e642f05b7ba9f32506b54740", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("size_changed", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("FLODrHtrT", "size_changed", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("size_changed", eventProperties, "FLODrHtrT", "aed429a4b5bd3d73a46fe6a87f9ecd3bf3869398e642f05b7ba9f32506b54740");
    }
    // destination Segment
    Segment.logEvent("size_changed", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface ChangeCountryProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * change_country: When changing countries.
event_label: {{country from}}_{{country to}}
event_location: menu|pop-up|footer
 *
 * When to trigger this event:
 * 1. When selecting a country
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/P8tUoYxJa/trigger/iAlBJNRHt
 * 2. When clicking on the change country button, in the pop up banner
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/P8tUoYxJa/trigger/XocwpVpmE
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/P8tUoYxJa}
 */
export function changeCountry(properties: ChangeCountryProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "P8tUoYxJa", "4ac6faedebb412147d935161770798a71ad2f9b430983b1a1de091feb9a7d8db", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("change_country", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("P8tUoYxJa", "change_country", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("change_country", eventProperties, "P8tUoYxJa", "4ac6faedebb412147d935161770798a71ad2f9b430983b1a1de091feb9a7d8db");
    }
    // destination Segment
    Segment.logEvent("change_country", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface ChangeLanguageProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * change_language: When switching between languages.
event_label: {{language from}}_{{language to}}
event_location: menu|pop-up|footer
 *
 * When to trigger this event:
 * 1. When selecting a language
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/wv224noP0/trigger/dpnHqNIFZ
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/wv224noP0}
 */
export function changeLanguage(properties: ChangeLanguageProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "wv224noP0", "a940dbcf3687b3932de990b75d8d8ed913a4f3b35fcb75f1ce0ff1cd3a6d5a43", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("change_language", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("wv224noP0", "change_language", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("change_language", eventProperties, "wv224noP0", "a940dbcf3687b3932de990b75d8d8ed913a4f3b35fcb75f1ce0ff1cd3a6d5a43");
    }
    // destination Segment
    Segment.logEvent("change_language", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface HeaderAccountClickProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * header_account_click: When clicking on the account logo in the header.
event_label: white|transparent
event_location: header
 *
 * When to trigger this event:
 * 1. When clicking on the account logo in the header
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/u1i6ex4HW/trigger/c4TmbDce1
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/u1i6ex4HW}
 */
export function headerAccountClick(properties: HeaderAccountClickProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "u1i6ex4HW", "104c7c851d87d96b3d82757257bbd52696ee4d62f6aefc958cdd8092303369b1", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("header_account_click", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("u1i6ex4HW", "header_account_click", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("header_account_click", eventProperties, "u1i6ex4HW", "104c7c851d87d96b3d82757257bbd52696ee4d62f6aefc958cdd8092303369b1");
    }
    // destination Segment
    Segment.logEvent("header_account_click", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface HeaderLogoClickProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * header_logo_click: When clicking on the SuitSupply logo in the header.
event_label: white|transparent
event_location: header
 *
 * When to trigger this event:
 * 1. When clicking on the SuitSupply logo in the header
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/vJwt-sKKq/trigger/evtGMEfPQ
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/vJwt-sKKq}
 */
export function headerLogoClick(properties: HeaderLogoClickProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "vJwt-sKKq", "21c8b96a507e5d1b84da96d019a59779f47aab9600b86ed0b65c0d04610f9483", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("header_logo_click", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("vJwt-sKKq", "header_logo_click", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("header_logo_click", eventProperties, "vJwt-sKKq", "21c8b96a507e5d1b84da96d019a59779f47aab9600b86ed0b65c0d04610f9483");
    }
    // destination Segment
    Segment.logEvent("header_logo_click", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface HeaderMinicartClickProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * header_minicart_click: When clicking on the minicart logo in the header.
event_label: white|transparent
event_location: header
 *
 * When to trigger this event:
 * 1. When clicking on the minicart logo in the header
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/Vzc7Bw6Sp/trigger/zaQ-uoQtx
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/Vzc7Bw6Sp}
 */
export function headerMinicartClick(properties: HeaderMinicartClickProperties
  ) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "Vzc7Bw6Sp", "99ac50d5c87fd8b5183272d8b2e5edea12dea2b05296ad58f10cec9e1991ad15", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("header_minicart_click", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("Vzc7Bw6Sp", "header_minicart_click", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("header_minicart_click", eventProperties, "Vzc7Bw6Sp", "99ac50d5c87fd8b5183272d8b2e5edea12dea2b05296ad58f10cec9e1991ad15");
    }
    // destination Segment
    Segment.logEvent("header_minicart_click", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface HeaderWishlistClickProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * header_wishlist_click: When clicking on the wishlist logo in the header.
event_label: white|transparent
event_location: header
 *
 * When to trigger this event:
 * 1. When clicking on the wishlist logo in the header
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/1Rx8sEaGk/trigger/1_A8oMR5X
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/1Rx8sEaGk}
 */
export function headerWishlistClick(properties: HeaderWishlistClickProperties
  ) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "1Rx8sEaGk", "4ccade217be6f7a5120e87717bf7b45d08d32e7b43cdfe4c14550ab4787c27cc", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("header_wishlist_click", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("1Rx8sEaGk", "header_wishlist_click", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("header_wishlist_click", eventProperties, "1Rx8sEaGk", "4ccade217be6f7a5120e87717bf7b45d08d32e7b43cdfe4c14550ab4787c27cc");
    }
    // destination Segment
    Segment.logEvent("header_wishlist_click", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface MenuOpenedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * menu_opened: When clicking on the menu logo in the header.
event_label: white|transparent
event_location: header
 *
 * When to trigger this event:
 * 1. When clicking on the menu hamburger in the header
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/Rh7-qbVFo/trigger/Ici_uz6Uv
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/Rh7-qbVFo}
 */
export function menuOpened(properties: MenuOpenedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "Rh7-qbVFo", "0d13253ced69dd59539a3bb14c9025011761be2148d2d298419be60170b19ef7", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("menu_opened", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("Rh7-qbVFo", "menu_opened", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("menu_opened", eventProperties, "Rh7-qbVFo", "0d13253ced69dd59539a3bb14c9025011761be2148d2d298419be60170b19ef7");
    }
    // destination Segment
    Segment.logEvent("menu_opened", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface MenuClickedProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string | null | undefined;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * menu_clicked: When selecting an option in the menu

event_label: {{first level shoes, clothes etc}}_{{category}}_{{subcategory}}
example:
1 level: clothing
2 levels: clothing_suits
3 levels: clothing_suits_classic-suits

event_location: menu
 *
 * When to trigger this event:
 * 1. When clicking an item in the menu
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/q034uYqya/trigger/dTt9M_KVq
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/q034uYqya}
 */
export function menuClicked(properties: MenuClickedProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  properties.eventLabel !== undefined && properties.eventLabel !== null ?
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel}) :
    eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: null});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "q034uYqya", "fd8169cfebc93dd75e7acf6e5f3f15f8abf3a62689685c472a6e92ecaee0af64", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("menu_clicked", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("q034uYqya", "menu_clicked", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("menu_clicked", eventProperties, "q034uYqya", "fd8169cfebc93dd75e7acf6e5f3f15f8abf3a62689685c472a6e92ecaee0af64");
    }
    // destination Segment
    Segment.logEvent("menu_clicked", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface JacketOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * jacket_option_select: When selecting a fabric (black-wool|black-velvet|navy-wool)

btc_option: black-wool|black-velvet|navy-wool
event_location: btc_suits_jacket|btc_suits_trousers|btc_suits_shirt
 *
 * When to trigger this event:
 * 1. When selecting a fabric
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/EU5N_T3DG/trigger/N8UFDe0Os
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/EU5N_T3DG}
 */
export function jacketOptionSelect(properties: JacketOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "EU5N_T3DG", "e6ed5813a0640a8af83f095c6a66793a0d8a7b287442eaf5eaad133074c79033", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("jacket_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("EU5N_T3DG", "jacket_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("jacket_option_select", eventProperties, "EU5N_T3DG", "e6ed5813a0640a8af83f095c6a66793a0d8a7b287442eaf5eaad133074c79033");
    }
    // destination Segment
    Segment.logEvent("jacket_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface ShirtOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * shirt_option_select: When selecting a shirt (pleated-bib|hidden-placket|pique-bib)

btc_option: {{SKU}}
event_location: btc_suits_shirt
 *
 * When to trigger this event:
 * 1. When selecting a shirt
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/ppI--NzO5/trigger/Q4NPkIiob
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/ppI--NzO5}
 */
export function shirtOptionSelect(properties: ShirtOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "ppI--NzO5", "22530ec292258ab2118cdbe138380ff9c476cde0fd3436476c28bcb0fee2a236", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("shirt_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("ppI--NzO5", "shirt_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("shirt_option_select", eventProperties, "ppI--NzO5", "22530ec292258ab2118cdbe138380ff9c476cde0fd3436476c28bcb0fee2a236");
    }
    // destination Segment
    Segment.logEvent("shirt_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface ShoesOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * shoes_option_select: When selecting a shoe (leather-oxford|velvet-slip-on)

btc_option: {{SKU}}
event_location: btc_suits_shoes
 *
 * When to trigger this event:
 * 1. When selecting a shoe style
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/dun37FtuD/trigger/RtTovP3s0
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/dun37FtuD}
 */
export function shoesOptionSelect(properties: ShoesOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "dun37FtuD", "b5e197ceddb9d956c15a2dffba5504f28030146cc1b5d613318359faa56ba635", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("shoes_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("dun37FtuD", "shoes_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("shoes_option_select", eventProperties, "dun37FtuD", "b5e197ceddb9d956c15a2dffba5504f28030146cc1b5d613318359faa56ba635");
    }
    // destination Segment
    Segment.logEvent("shoes_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface BowtieOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string | null | undefined;
  btcOption: string;
}
/**
 * bowtie_option_select: When selecting a bow-tie (black-self-tied)

When confirming a bowtie (black-self-tied)
btc_option isn't name in this case since a lot of bowties have the same name (for example Black Self-Tied, therefor we use the SKU in the btc_option

btc_option: {{SKU}}
event_location: btc_suits_bowtie
 *
 * When to trigger this event:
 * 1. When selecting a bowtie
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/2yi_RMQ3b/trigger/BpZWZq_qj
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/2yi_RMQ3b}
 */
export function bowtieOptionSelect(properties: BowtieOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  properties.eventLocation !== undefined && properties.eventLocation !== null ?
    eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation}) :
    eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: null});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "2yi_RMQ3b", "bc7b41f344b82154173cb48f98763a95c7d3d850190a14e1548e6888c687388f", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("bowtie_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("2yi_RMQ3b", "bowtie_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("bowtie_option_select", eventProperties, "2yi_RMQ3b", "bc7b41f344b82154173cb48f98763a95c7d3d850190a14e1548e6888c687388f");
    }
    // destination Segment
    Segment.logEvent("bowtie_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface CufflinkOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * cufflink_option_select: When selecting a cufflink

btc_option isn't the name in this case since a lot of cufflinks have the same name (for example Silver round or Gold round), therefor we use the SKU in the btc_option

btc_option: {{SKU}}
event_location: btc_suits_cufflink
 *
 * When to trigger this event:
 * 1. When selecting a cufflink
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/RkRz_Hj16/trigger/zInO1Vapu
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/RkRz_Hj16}
 */
export function cufflinkOptionSelect(
  properties: CufflinkOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "RkRz_Hj16", "0df28cf583f7e8230adb545221028bbd1a7fd323760b0f84603ecb64fe337a15", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("cufflink_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("RkRz_Hj16", "cufflink_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("cufflink_option_select", eventProperties, "RkRz_Hj16", "0df28cf583f7e8230adb545221028bbd1a7fd323760b0f84603ecb64fe337a15");
    }
    // destination Segment
    Segment.logEvent("cufflink_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface SuspendersOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * suspenders_option_select: When selecting suspenders

btc_option: {{SKU}}
event_location: btc_suits_suspenders
 *
 * When to trigger this event:
 * 1. When selecting suspenders
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/DZOC-lBrn/trigger/fS2cf2hM1
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/DZOC-lBrn}
 */
export function suspendersOptionSelect(
  properties: SuspendersOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "DZOC-lBrn", "d12c792bbccb4b45563cd1a117e781dbe3bd5d9f1b8373d6e6717cb14534f9ec", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("suspenders_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("DZOC-lBrn", "suspenders_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("suspenders_option_select", eventProperties, "DZOC-lBrn", "d12c792bbccb4b45563cd1a117e781dbe3bd5d9f1b8373d6e6717cb14534f9ec");
    }
    // destination Segment
    Segment.logEvent("suspenders_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface BtcSummaryEditProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * btc_summary_edit: When clicking 'edit' icon on summary screen

event_location: btc_summary_{{category} example: btc_summary_jacket
 *
 * When to trigger this event:
 * 1. When clicking on 'edit' icon on summary screen
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4RLb03h05/trigger/Fye-Jl3tu
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/4RLb03h05}
 */
export function btcSummaryEdit(properties: BtcSummaryEditProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "4RLb03h05", "222ae02105eeed1da89c5c507cae9683f949deeba7a5886b5ba4dc80217271c7", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("btc_summary_edit", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("4RLb03h05", "btc_summary_edit", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("btc_summary_edit", eventProperties, "4RLb03h05", "222ae02105eeed1da89c5c507cae9683f949deeba7a5886b5ba4dc80217271c7");
    }
    // destination Segment
    Segment.logEvent("btc_summary_edit", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface LapelOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * lapel_option_select: When selecting a lapel on jacket

btc_option: {{SKU}}
event_location: btc_suits_jacket_lapel
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/o7jV0_VNo}
 */
export function lapelOptionSelect(properties: LapelOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "o7jV0_VNo", "ab598944c545d76ce7d0b93e236b36bd825d62622c38669123952ecfc09fba20", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("lapel_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("o7jV0_VNo", "lapel_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("lapel_option_select", eventProperties, "o7jV0_VNo", "ab598944c545d76ce7d0b93e236b36bd825d62622c38669123952ecfc09fba20");
    }
    // destination Segment
    Segment.logEvent("lapel_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface PreviousStepProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * previous_step: when clicking on previous arrow in BTC configurator
event_category: btc_interactions
event_location: btc_{{category}}_{{subcategory}} example: btc_suits_jacket_lapel
 *
 * When to trigger this event:
 * 1.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/nIjDUsmcwn/trigger/ySRM6FVek
 * 2.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/nIjDUsmcwn/trigger/Cq9EZLjcQ
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/nIjDUsmcwn}
 */
export function previousStep(properties: PreviousStepProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "nIjDUsmcwn", "67abb22d62375ded15071c6526988c3a0ddd177315f6c440e41945f2865c1f13", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("previous_step", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("nIjDUsmcwn", "previous_step", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("previous_step", eventProperties, "nIjDUsmcwn", "67abb22d62375ded15071c6526988c3a0ddd177315f6c440e41945f2865c1f13");
    }
    // destination Segment
    Segment.logEvent("previous_step", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface NextStepProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
}
/**
 * next_step: when clicking on next arrow in BTC configurator
event_category: btc_interactions
event_location: btc_{{category}}_{{subcategory}} example: btc_suits_jacket_lapel
 *
 * When to trigger this event:
 * 1.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/7pxnr-tZL/trigger/y1wt8zRXy
 * 2.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/7pxnr-tZL/trigger/5OS5ilICD
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/7pxnr-tZL}
 */
export function nextStep(properties: NextStepProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "7pxnr-tZL", "64e1b7d389595941ae715100d13aff4530cb9276f2856050f36af470de0c3c20", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("next_step", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("7pxnr-tZL", "next_step", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("next_step", eventProperties, "7pxnr-tZL", "64e1b7d389595941ae715100d13aff4530cb9276f2856050f36af470de0c3c20");
    }
    // destination Segment
    Segment.logEvent("next_step", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface SizeGuideClickProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * size_guide_click: When clicking on the 'size guide' button

btc_option: {{SKU}}
event_location: example: btc_suits_shirt
 *
 * When to trigger this event:
 * 1. When clicking 'Size guide' button
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/-AnVCYt0T/trigger/xC8kgIxIk
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/-AnVCYt0T}
 */
export function sizeGuideClick(properties: SizeGuideClickProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "-AnVCYt0T", "a885f2acf248f84498badd73abb5d102a62212a6e91a79bd5ade6c31bfa4f577", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("size_guide_click", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("-AnVCYt0T", "size_guide_click", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("size_guide_click", eventProperties, "-AnVCYt0T", "a885f2acf248f84498badd73abb5d102a62212a6e91a79bd5ade6c31bfa4f577");
    }
    // destination Segment
    Segment.logEvent("size_guide_click", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface SizeConfirmProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * size_confirm: When clicking on the 'confirm' button

btc_option: {{SKU}}
event_location: example: btc_suits_shirt
 *
 * When to trigger this event:
 * 1. When clicking 'confirm' button
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/y80nFRNre/trigger/YUSb5ZlpJ
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/y80nFRNre}
 */
export function sizeConfirm(properties: SizeConfirmProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "y80nFRNre", "01e297bc5f2513265f2533d179be1e9abef0918a1c1a888648b576c39fd8c88a", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("size_confirm", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("y80nFRNre", "size_confirm", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("size_confirm", eventProperties, "y80nFRNre", "01e297bc5f2513265f2533d179be1e9abef0918a1c1a888648b576c39fd8c88a");
    }
    // destination Segment
    Segment.logEvent("size_confirm", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface FabricOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  cmOption: string | null | undefined;
}
/**
 * fabric_option_select: Firing when the fabric option is clicked.

- cm_option: {{clicked fabric group}}_{{clicked color code}} example: most-popular_black-pure-s110s-wool|black_black-wool-stretch

- event_location: cm_{{category}}_{{subcategory}} example: cm_suits_jacket
 *
 * When to trigger this event:
 * 1. When a fabric is selected
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/yhrlHOrZQ/trigger/5QvaRyd3N
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.cmOption: Describes which option was selected, and which outcome was chosen
Description is added in the event.
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/yhrlHOrZQ}
 */
export function fabricOptionSelect(properties: FabricOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  properties.cmOption !== undefined && properties.cmOption !== null ?
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: properties.cmOption}) :
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: null});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "yhrlHOrZQ", "a3ef1c17b3cc5212fc89b239b7707396c97ecc8886edf7309c7d773fe50694e0", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("fabric_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("yhrlHOrZQ", "fabric_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("fabric_option_select", eventProperties, "yhrlHOrZQ", "a3ef1c17b3cc5212fc89b239b7707396c97ecc8886edf7309c7d773fe50694e0");
    }
    // destination Segment
    Segment.logEvent("fabric_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface FabricOptionConfirmProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  cmOption: string | null | undefined;
}
/**
 * fabric_option_confirm: Firing when the fabric option is confirmed.

- cm_option: {{clicked fabric group}}_{{clicked color code}} example: most-popular_black-pure-s110s-wool|black_black-wool-stretch

- event_location: cm_{{category}}_{{subcategory}} example: cm_suits_jacket
 *
 * When to trigger this event:
 * 1. When a fabric option is confirmed.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kCtNIDRn2/trigger/dIhRahME5
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.cmOption: Describes which option was selected, and which outcome was chosen
Description is added in the event.
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/kCtNIDRn2}
 */
export function fabricOptionConfirm(properties: FabricOptionConfirmProperties
  ) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  properties.cmOption !== undefined && properties.cmOption !== null ?
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: properties.cmOption}) :
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: null});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "kCtNIDRn2", "0b4bfafa0a30dbe333237ecb7a166d80e5cf2fa699fa1717e9adb9cb2a7318bc", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("fabric_option_confirm", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("kCtNIDRn2", "fabric_option_confirm", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("fabric_option_confirm", eventProperties, "kCtNIDRn2", "0b4bfafa0a30dbe333237ecb7a166d80e5cf2fa699fa1717e9adb9cb2a7318bc");
    }
    // destination Segment
    Segment.logEvent("fabric_option_confirm", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface StyleOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
}
/**
 * style_option_select: Firing when the style option is selected.

- cm_option:{{selected option}} example: business|casual|classic-double-breasted

- event_location: cm_{{category}}_{{subcategory}} example: cm_suits_jacket
 *
 * When to trigger this event:
 * 1. When a style is selected.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/eRtiLrwzB/trigger/r-pdwSlnh
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/eRtiLrwzB}
 */
export function styleOptionSelect(properties: StyleOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "eRtiLrwzB", "6eedc51f0554ca81d156229f7908e865b6767fd76abf84a4a1a55ff25ce5c12c", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("style_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("eRtiLrwzB", "style_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("style_option_select", eventProperties, "eRtiLrwzB", "6eedc51f0554ca81d156229f7908e865b6767fd76abf84a4a1a55ff25ce5c12c");
    }
    // destination Segment
    Segment.logEvent("style_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface StyleOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * style_option_select: Firing when the style option is selected.

- cm_option:{{selected option}} example: business|casual|classic-double-breasted

- event_location: cm_{{category}}_{{subcategory}} example: cm_suits_jacket, variant description: When selecting a style (two-piece or three-piece)

btc_option: two-piece|three-piece
event_location: btc_suits
 *
 * When to trigger this event:
 * 1. When selecting a style
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/eRtiLrwzB.icAnSf8FR/trigger/Eofccc3se
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/eRtiLrwzB.icAnSf8FR}
 */
export function styleOptionSelectBtc(properties: StyleOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "eRtiLrwzB.icAnSf8FR", "1ad1767716d2aaefa472bda13e86d51c21e902409fa82d6c4cd07425225eda0e", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("style_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("eRtiLrwzB.icAnSf8FR", "style_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("style_option_select", eventProperties, "eRtiLrwzB.icAnSf8FR", "1ad1767716d2aaefa472bda13e86d51c21e902409fa82d6c4cd07425225eda0e");
    }
    // destination Segment
    Segment.logEvent("style_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface StyleOptionConfirmProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  cmOption: string | null | undefined;
}
/**
 * style_option_confirm: Firing when the style option is selected.

- cm_option:{{selected option}} example: business|casual|classic-double-breasted

- event_location: cm_{{category}}_{{subcategory}} example: cm_suits_jacket
 *
 * When to trigger this event:
 * 1. When a style is confirmed.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/yhBSr917Q/trigger/BXyfxriJU
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.cmOption: Describes which option was selected, and which outcome was chosen
Description is added in the event.
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/yhBSr917Q}
 */
export function styleOptionConfirm(properties: StyleOptionConfirmProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  properties.cmOption !== undefined && properties.cmOption !== null ?
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: properties.cmOption}) :
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: null});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "yhBSr917Q", "8dbe7cf54ec15fa64edb1902d29d3e37057044e2cd361322bd1862a54f3f1745", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("style_option_confirm", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("yhBSr917Q", "style_option_confirm", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("style_option_confirm", eventProperties, "yhBSr917Q", "8dbe7cf54ec15fa64edb1902d29d3e37057044e2cd361322bd1862a54f3f1745");
    }
    // destination Segment
    Segment.logEvent("style_option_confirm", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface SummaryEditProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  cmOption: string | null | undefined;
}
/**
 * summary_edit: When clicking on 'edit' icon on the summary screen

- event_location: cm_{{category}}_summaryexample cm_suits_summary
- cm_option: jacket|trousers|waistcoat

 *
 * When to trigger this event:
 * 1. When clicking on 'edit' icon on the summary screen 
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/KNnHKBbfV/trigger/-TISpFDBA
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.cmOption: Describes which option was selected, and which outcome was chosen
Description is added in the event.
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/KNnHKBbfV}
 */
export function summaryEdit(properties: SummaryEditProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  properties.cmOption !== undefined && properties.cmOption !== null ?
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: properties.cmOption}) :
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: null});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "KNnHKBbfV", "3b4e9ea5cd704f0790282c4ffec16c8563dccf1eb764753db0f2b5b5e437b1a7", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("summary_edit", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("KNnHKBbfV", "summary_edit", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("summary_edit", eventProperties, "KNnHKBbfV", "3b4e9ea5cd704f0790282c4ffec16c8563dccf1eb764753db0f2b5b5e437b1a7");
    }
    // destination Segment
    Segment.logEvent("summary_edit", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface StyleOptionChangeProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  cmOption: string | null | undefined;
}
/**
 * style_option_change: Firing when the style change/edit is selected.

- cm_option:{{selected option}} example: business|casual|classic-double-breasted

- event_location: {{category}}_{{subcategory}} example: cm_suits_jacket
 *
 * When to trigger this event:
 * 1. When the option to change the style is clicked.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/RxyJeDhDH/trigger/18NhXj3B6
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.cmOption: Describes which option was selected, and which outcome was chosen
Description is added in the event.
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/RxyJeDhDH}
 */
export function styleOptionChange(properties: StyleOptionChangeProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  properties.cmOption !== undefined && properties.cmOption !== null ?
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: properties.cmOption}) :
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: null});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "RxyJeDhDH", "f04e8d6eaeaa4dd086faa7e5e27a8fba9fdb48843b3b6fe4494144450d4eb6a3", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("style_option_change", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("RxyJeDhDH", "style_option_change", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("style_option_change", eventProperties, "RxyJeDhDH", "f04e8d6eaeaa4dd086faa7e5e27a8fba9fdb48843b3b6fe4494144450d4eb6a3");
    }
    // destination Segment
    Segment.logEvent("style_option_change", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface StyleOptionChangeConfirmProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  cmOption: string | null | undefined;
}
/**
 * style_option_change_confirm: Firing when the pop up 'change style' is clicked.

- cm_option: {{selected option}} example: business|casual|classic-double-breasted

- event_location: cm_{{category}}_{{subcategory}} example: cm_suits_jacket
 *
 * When to trigger this event:
 * 1. When the option to change the style is confirmed.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/EvgoQxQSE/trigger/R0LLZPLto
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.cmOption: Describes which option was selected, and which outcome was chosen
Description is added in the event.
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/EvgoQxQSE}
 */
export function styleOptionChangeConfirm(
  properties: StyleOptionChangeConfirmProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  properties.cmOption !== undefined && properties.cmOption !== null ?
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: properties.cmOption}) :
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: null});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "EvgoQxQSE", "cf200438dfa7fc946d009caa76f392c9bbe0765a28b1db54dac5edd11c05a6ed", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("style_option_change_confirm", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("EvgoQxQSE", "style_option_change_confirm", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("style_option_change_confirm", eventProperties, "EvgoQxQSE", "cf200438dfa7fc946d009caa76f392c9bbe0765a28b1db54dac5edd11c05a6ed");
    }
    // destination Segment
    Segment.logEvent("style_option_change_confirm", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface StyleOptionChangeCancelProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  cmOption: string | null | undefined;
}
/**
 * style_option_change_cancel: Firing when the pop up 'change style' is cancelled.

- cm_option: {{selected option}} example: business|casual|classic-double-breasted

- event_location: cm_{{category}}_{{subcategory}} example: cm_suits_jacket
 *
 * When to trigger this event:
 * 1. When the option to change the style is cancelled.
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/viJG3zwB_/trigger/cAfAKMRSv
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.cmOption: Describes which option was selected, and which outcome was chosen
Description is added in the event.
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/viJG3zwB_}
 */
export function styleOptionChangeCancel(
  properties: StyleOptionChangeCancelProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  properties.cmOption !== undefined && properties.cmOption !== null ?
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: properties.cmOption}) :
    eventPropertiesArray.push({id: "PAXuVgcO0", name: "cm_option", value: null});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "viJG3zwB_", "3c83e0a616a42bc1ac197e964e8bc77ba2b30d4393dedab178ceb5db5f31133a", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("style_option_change_cancel", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("viJG3zwB_", "style_option_change_cancel", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("style_option_change_cancel", eventProperties, "viJG3zwB_", "3c83e0a616a42bc1ac197e964e8bc77ba2b30d4393dedab178ceb5db5f31133a");
    }
    // destination Segment
    Segment.logEvent("style_option_change_cancel", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export interface TrousersOptionSelectProperties {
  currency: CurrencyValueType;
  country: CountryValueType;
  language: LanguageValueType;
  url: string;
  locationId: string;
  userId: string;
  loggedIn: LoggedInValueType;
  pageType: PageTypeValueType;
  eventLabel: string;
  eventCategory: EventCategoryValueType;
  eventLocation: string;
  btcOption: string;
}
/**
 * trousers_option_select: When selecting a fabric (black-wool|black-velvet|navy-wool)

btc_option: black-wool|black-velvet|navy-wool
event_location: btc_suits_jacket|btc_suits_trousers|btc_suits_shirt
 *
 * When to trigger this event:
 * 1. When selecting a fabric
 * View in Avo: https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/CqpdLZEyR/trigger/yzkz_8B1U0
 *
 * @param properties the properties associatied with this event
 * @param properties.currency: Currency code, ISO standard in lowercase letters
 * @param properties.country: Local country of website, ISO standard, lowercase
 * @param properties.language: language used on page, ISO standard, lowercase
 * @param properties.url: URL without locale
 * @param properties.locationId: Url with locale
 * @param properties.userId: Unique customer ID
 * @param properties.loggedIn: 'true' or 'false'
 * @param properties.pageType: describes the page_type
 * @param properties.eventLabel: Description of event, not always required
 * @param properties.eventCategory: Overall event category
 * @param properties.eventLocation: Describes where event is located on the website. Never applicable to 'ecommerce' events, and

- For wishlist panel: wishlist_panel
- For add to bag panel: minicart_panel
- For OOS panel: oos
- For shop the look panel: 'products_mwtw_{{number}}'
- For mix and match panel: mixandmatch
- for Perfect White shirt finder: pwsf_panel
- For Size Passport: size-passport_panel
- For PDP size guide button: pdp
 * @param properties.btcOption: no description
 *
 * @see {@link https://www.avo.app/schemas/JmwsgKTQe50MTmUE9FVs/branches/q8nq0c3J4/events/CqpdLZEyR}
 */
export function trousersOptionSelect(
  properties: TrousersOptionSelectProperties) {
  // @ts-ignore
  let eventPropertiesArray: array = [];
  eventPropertiesArray.push({id: "jhDpoElQU", name: "currency", value: properties.currency});
  eventPropertiesArray.push({id: "bCDyX8-bZ", name: "country", value: properties.country});
  eventPropertiesArray.push({id: "8iHihZ0rO", name: "language", value: properties.language});
  eventPropertiesArray.push({id: "olJP9CQ0tb", name: "url", value: properties.url});
  eventPropertiesArray.push({id: "memdKZdQJ1", name: "location_id", value: properties.locationId});
  eventPropertiesArray.push({id: "piJkZJx8sqS", name: "user_id", value: properties.userId});
  eventPropertiesArray.push({id: "Kvhizl7kAi", name: "logged_in", value: properties.loggedIn});
  eventPropertiesArray.push({id: "gppkY78PuY", name: "page_type", value: properties.pageType});
  eventPropertiesArray.push({id: "5mI3k6x6_", name: "event_label", value: properties.eventLabel});
  eventPropertiesArray.push({id: "VdCb01TKRz", name: "event_category", value: properties.eventCategory});
  eventPropertiesArray.push({id: "te07FO5wjg", name: "event_location", value: properties.eventLocation});
  eventPropertiesArray.push({id: "bEtCdP6Ew", name: "btc_option", value: properties.btcOption});
  let eventProperties = convertPropertiesArrayToMap(eventPropertiesArray)
  // @ts-ignore
  let userPropertiesArray: array = [];
  let userProperties = convertPropertiesArrayToMap(userPropertiesArray)
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "CqpdLZEyR", "e7a1c0cfa1c80f9ccc196815210232ee2f42af3b84257d1026cfca30c8d2b484", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    InternalAvoLogger.logEventSent("trousers_option_select", eventProperties, userProperties);
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("CqpdLZEyR", "trousers_option_select", messages, eventPropertiesArray, userPropertiesArray, []);
    }
  }
  if (!__AVO_NOOP__) {
    if (__INSPECTOR__ != null) {
      // @ts-ignore
      __INSPECTOR__._avoFunctionTrackSchemaFromEvent("trousers_option_select", eventProperties, "CqpdLZEyR", "e7a1c0cfa1c80f9ccc196815210232ee2f42af3b84257d1026cfca30c8d2b484");
    }
    // destination Segment
    Segment.logEvent("trousers_option_select", (Object as any).assign({}, eventProperties));
  } else {
    // do nothing
  }
}

export default {
  AvoEnv,
  initAvo,
  avoInspectorApiKey,
  MixAndMatch,
  ItemListName,
  Language,
  PlpGridImages,
  Category,
  LoggedIn,
  EventCategory,
  ListId,
  Country,
  Affiliation,
  Brand,
  SsMedium,
  PageType,
  Currency,
  Creative,
  Variant,
  productClicked,
  productViewed,
  productAdded,
  pageLoaded,
  promotionViewed,
  promotionClicked,
  selectSize,
  sizeChanged,
  changeCountry,
  changeLanguage,
  headerAccountClick,
  headerLogoClick,
  headerMinicartClick,
  headerWishlistClick,
  menuOpened,
  menuClicked,
  jacketOptionSelect,
  shirtOptionSelect,
  shoesOptionSelect,
  bowtieOptionSelect,
  cufflinkOptionSelect,
  suspendersOptionSelect,
  btcSummaryEdit,
  lapelOptionSelect,
  previousStep,
  nextStep,
  sizeGuideClick,
  sizeConfirm,
  fabricOptionSelect,
  fabricOptionConfirm,
  styleOptionSelect,
  styleOptionSelectBtc,
  styleOptionConfirm,
  summaryEdit,
  styleOptionChange,
  styleOptionChangeConfirm,
  styleOptionChangeCancel,
  trousersOptionSelect,
}

// AVOMODULEMAP:"Avo"
// AVOEVENTMAP:["productClicked","productViewed","productAdded","pageLoaded","promotionViewed","promotionClicked","selectSize","sizeChanged","changeCountry","changeLanguage","headerAccountClick","headerLogoClick","headerMinicartClick","headerWishlistClick","menuOpened","menuClicked","jacketOptionSelect","shirtOptionSelect","shoesOptionSelect","bowtieOptionSelect","cufflinkOptionSelect","suspendersOptionSelect","btcSummaryEdit","lapelOptionSelect","previousStep","nextStep","sizeGuideClick","sizeConfirm","fabricOptionSelect","fabricOptionConfirm","styleOptionSelect","styleOptionSelectBtc","styleOptionConfirm","summaryEdit","styleOptionChange","styleOptionChangeConfirm","styleOptionChangeCancel","trousersOptionSelect"]
