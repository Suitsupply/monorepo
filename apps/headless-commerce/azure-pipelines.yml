trigger:
  branches:
    include:
      - main
      - release
      - develop
      - feature/*
      - bugfix/*

pr:
  branches:
    include:
      - main
      - release
      - develop

pool:
  vmImage: ubuntu-latest

variables:
  - name: CI
    value: "true"

  - name: node_version_spec
    value: "20.9.0"

  - name: node_modules_root
    value: "."

  - name: pnpm_config_cache
    value: $(Pipeline.Workspace)/.pnpm-store

  - name: is_PR
    value: $[eq(variables['Build.Reason'], 'pullRequest')]

  - name: is_prd
    value: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), and(eq(variables.is_PR, true), eq(variables['System.PullRequest.targetBranchName'], 'refs/heads/main')))]

  - name: is_acc
    value: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/release'), and(eq(variables.is_PR, true), eq(variables['System.PullRequest.targetBranchName'], 'refs/heads/release')))]

  - name: is_base_branch
    value: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/release'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))]

  - name: is_preview
    value: $[or(eq(variables.is_PR, true), ne(variables.is_base_branch, true))]

  - name: cp_codes
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: 1524235
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release') }}:
      value: 1504251 1595681 1595683 1595685 1595687
    ? ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.SourceBranch'], 'refs/heads/release')) }}
    : value: 1504251 1595681 1595683 1595685 1595687

  - name: VERCEL_PROJECT_ID
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: "$(VERCEL_PROJECT_ID_PRODUCTION)"
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release') }}:
      value: "$(VERCEL_PROJECT_ID_ACCEPTANCE)"
    ? ${{ if and(ne(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.SourceBranch'], 'refs/heads/release')) }}
    : value: "$(VERCEL_PROJECT_ID_TESTING)"

jobs:
  - job: InstallAndTest
    displayName: "Install dependencies and run tests"
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version_spec)
          checkLatest: true

      - task: npmAuthenticate@0
        inputs:
          workingFile: ".npmrc"

      - script: |
          corepack enable
          corepack prepare pnpm@latest-8 --activate
        displayName: "Setup PNPM"

      - task: Cache@2
        inputs:
          key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
          path: $(pnpm_config_cache)
        displayName: Cache pnpm

      - task: Cache@2
        inputs:
          key: 'turbo | "$(Agent.OS)" | pnpm-lock.yaml'
          path: .turbo
        displayName: Cache turbo

      - script: pnpm config set store-dir $(pnpm_config_cache)
        displayName: "Setup PNPM Config"

      - script: |
          pnpm install
        displayName: "PNPM Install"

      - script: |
          pnpm run build
        displayName: "Turbo Build"

      - task: PublishCodeCoverageResults@2
        inputs:
          summaryFileLocation: "./coverage/clover.xml"
          pathToSources: "."
          failIfCoverageEmpty: true

  # - job: Deploy
  #   dependsOn: InstallAndTest
  #   condition: and(succeeded('InstallAndTest'), ne(variables.is_PR, true))
  #   displayName: "Deploy"
  #   steps:
  #     - script: |
  #         vercel deploy --prod --token=$(VERCEL_TOKEN) --scope=suitsupply-team > deployment-url.txt
  #       displayName: "Deploy Main"
  #       condition: ne(variables.is_preview, true)

  #     - script: |
  #         vercel deploy --token=$(VERCEL_TOKEN) --scope=suitsupply-team > deployment-url.txt
  #       displayName: "Deploy Preview"
  #       condition: eq(variables.is_preview, true)

  #     - task: PublishPipelineArtifact@1
  #       inputs:
  #         targetPath: "deployment-url.txt"
  #         artifact: "deployment-url"

  # - job: E2ETests
  #   dependsOn: Deploy
  #   condition: and(succeeded('Deploy'), eq(variables.is_preview, true))
  #   displayName: 'E2E Tests'
  #   steps:
  #     - checkout: self

  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: $(node_version_spec)
  #         checkLatest: true

  #     - task: npmAuthenticate@0
  #       inputs:
  #         workingFile: '.npmrc'

  #     - task: Cache@2
  #       inputs:
  #         key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
  #         path: $(pnpm_config_cache)
  #       displayName: Cache pnpm

  #     - script: |
  #         corepack enable
  #         corepack prepare pnpm@latest-8 --activate
  #       displayName: 'Setup PNPM'

  #     - script: pnpm config set store-dir $(pnpm_config_cache)
  #       displayName: 'Setup PNPM Config'

  #     - script: |
  #         pnpm install
  #       displayName: 'PNPM Install'

  #     - script: |
  #         pnpm exec playwright install --with-deps
  #       displayName: 'Install Playwright'

  #     - task: DownloadPipelineArtifact@2
  #       inputs:
  #         artifact: 'deployment-url'
  #         path: $(Pipeline.Workspace)

  #     - script: |
  #         export DEPLOY_URL=$(cat $(Pipeline.Workspace)/deployment-url.txt)
  #         pnpm test:e2e
  #       displayName: 'Run e2e tests'
  #       continueOnError: 'false'

  # - job: ClearCache
  #   dependsOn: Deploy
  #   condition: and(succeeded('Deploy'), ne(variables.IS_PR, true))
  #   displayName: "Clear cache"
  #   steps:
  #     - task: DownloadSecureFile@1
  #       name: "akamaiConfig"
  #       displayName: "Get secure file for akamai"
  #       inputs:
  #         secureFile: ".edgerc"

  #     - bash: |
  #         # Homebrew is the easiest way to install these tools. Otherwise you need to download & install the binaries. Homebrew only works on
  #         # the Ubuntu and MacOS hosted agents
  #         eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  #         echo $(cp_codes)
  #         brew -v
  #         brew config
  #         brew update
  #         brew search akamai
  #         brew info akamai
  #         brew install akamai
  #         # Make akamai think it asked the 'share statistics' question already.
  #         mkdir ~/.akamai-cli
  #         printf '[cli]\nenable-cli-statistics=false' >> ~/.akamai-cli/config
  #         # Install Akamai plugin for working with purge
  #         akamai install purge
  #         akamai purge --edgerc $(akamaiConfig.secureFilePath) invalidate --cpcode $(cp_codes)
  #       displayName: "Install Akamai Command Line Tools & purge cache"
