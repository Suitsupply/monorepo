trigger:
  branches:
    include:
      - main
      - release
      - develop
      - feature/*
      - bugfix/*

pr:
  branches:
    include:
      - main
      - release
      - develop

pool:
  vmImage: ubuntu-latest

variables:
  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      - group: 'headless-commerce-main'
  - ${{ if eq(variables['Build.SourceBranchName'], 'release') }}:
      - group: 'headless-commerce-release'
  - ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
      - group: 'headless-commerce-develop'

  - name: CI
    value: 'true'

  - name: node_version_spec
    value: '20.12.2'

  - name: node_modules_root
    value: '.'

  - name: pnpm_config_cache
    value: $(Pipeline.Workspace)/.pnpm-store

  - name: is_pr
    value: $[eq(variables['Build.Reason'], 'pullRequest')]

  - name: is_main_branch
    value: $[eq(variables['Build.SourceBranchName'], 'main')]

  - name: is_release_branch
    value: $[eq(variables['Build.SourceBranchName'], 'release')]

  - name: is_develop_branch
    value: $[eq(variables['Build.SourceBranchName'], 'develop')]

  - name: is_preview
    value: $[or(eq(variables.is_pr, true), and(eq(variables.is_main_branch, false), eq(variables.is_release_branch, false), eq(variables.is_develop_branch, false)))]

  - name: cp_codes
    ${{ if eq(variables.is_main_branch, true) }}:
      value: 1524235
    ${{ if eq(variables.is_release_branch, true) }}:
      value: 1504251 1595681 1595683 1595685 1595687
    ${{ if eq(variables.is_develop_branch, true) }}:
      value: 1504251 1595681 1595683 1595685 1595687

  # - name: VERCEL_PROJECT_ID
  #   ${{ if eq(variables.is_main_branch, true) }}:
  #     value: '$(VERCEL_PROJECT_ID_PRODUCTION)'
  #   ${{ if eq(variables.is_release_branch, true) }}:
  #     value: '$(VERCEL_PROJECT_ID_ACCEPTANCE)'
  #   ${{ if eq(variables.is_develop_branch, true) }}:
  #     value: '$(VERCEL_PROJECT_ID_TESTING)'

  - name: VERCEL_PROJECT_NAME
    ${{ if eq(variables.is_main_branch, true) }}:
      value: susu-monorepo_headless-commerce_production
    ${{ if eq(variables.is_release_branch, true) }}:
      value: susu-monorepo_headless-commerce_acceptance
    ${{ if eq(variables.is_develop_branch, true) }}:
      value: susu-monorepo_headless-commerce_testing

  - name: APPLICATION_NAME
    value: headless-commerce

  - name: APPLICATION_DIRECTORY
    value: apps/$(APPLICATION_NAME)

  - name: APPLICATION_VERCEL_SCOPE
    value: suitsupply-team

  - name: NX_CACHE
    value: apps/$(APPLICATION_NAME)/.nx

jobs:
  - job: InstallAndTest
    displayName: 'Install dependencies and run tests'
    steps:
      # Set Node version.
      - task: NodeTool@0
        inputs:
          versionSpec: $(node_version_spec)
          checkLatest: true
        continueOnError: false

      # Authenticate with NPM.
      - task: npmAuthenticate@0
        inputs:
          workingFile: '.npmrc'
        continueOnError: false

      # Load NPM packages from cache.
      - task: Cache@2
        inputs:
          key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
          path: $(pnpm_config_cache)
        displayName: Cache pnpm
        continueOnError: false

      # Install NX.
      - script: |
          mkdir -p .nx/workspace-data
          touch .nx/workspace-data/lockfile.hash
        displayName: 'Ensure NX cache key file'
        continueOnError: 'false'

      # Load NX cache.
      - task: Cache@2
        inputs:
          key: 'nx | "$(Agent.OS)" | .nx/workspace-data/lockfile.hash'
          path: $(NX_CACHE)
        displayName: Cache NX
        continueOnError: false

      # Install pnpm.
      - script: |
          corepack enable
          corepack prepare pnpm@latest-8 --activate
        displayName: 'Setup PNPM'
        continueOnError: 'false'

      # Set pnpm config.
      - script: pnpm config set store-dir $(pnpm_config_cache)
        displayName: 'Setup PNPM Config'
        continueOnError: 'false'

      # Vercel Pull.
      - script: |
          vercel pull --yes --token=$(VERCEL_TOKEN) --scope=$(APPLICATION_VERCEL_SCOPE)
          vercel env pull .env --yes --token=$(VERCEL_TOKEN) --scope=$(APPLICATION_VERCEL_SCOPE)
        displayName: 'Vercel Pull'

      # Install dependencies.
      - script: |
          pnpm install
        displayName: 'PNPM Install'
        continueOnError: 'false'

      # Test.
      - script: |
          pnpm nx run @susu/headless-commerce:test
        displayName: 'Lint and Test'
        continueOnError: 'false'

      # Deploy.
      - script: |
          vercel --prod --token=$(VERCEL_TOKEN) --scope=$(APPLICATION_VERCEL_SCOPE) > deployment-url.txt
        displayName: 'Deploy Main'
        condition: ne(variables.is_preview, true)
        continueOnError: 'false'
      - script: |
          vercel --token=$(VERCEL_TOKEN) --scope=$(APPLICATION_VERCEL_SCOPE) > deployment-url.txt
        displayName: 'Deploy Preview'
        condition: eq(variables.is_preview, true)
        continueOnError: 'false'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'deployment-url.txt'
          artifact: 'deployment-url'
        continueOnError: false

      # Publish coverage report.
      - task: PublishCodeCoverageResults@2
        inputs:
          summaryFileLocation: './coverage/clover.xml'
          pathToSources: '.'
          failIfCoverageEmpty: true
        continueOnError: false

  # - job: Deploy
  #   dependsOn: InstallAndTest
  #   condition: and(succeeded('InstallAndTest'), ne(variables.is_pr, true))
  #   displayName: "Deploy"
  #   steps:
  #     - script: |
  #         vercel deploy --prod --token=$(VERCEL_TOKEN) --scope=suitsupply-team > deployment-url.txt
  #       displayName: "Deploy Main"
  #       condition: ne(variables.is_preview, true)
  #     - script: |
  #         vercel deploy --token=$(VERCEL_TOKEN) --scope=suitsupply-team > deployment-url.txt
  #       displayName: "Deploy Preview"
  #       condition: eq(variables.is_preview, true)
  #     - task: PublishPipelineArtifact@1
  #       inputs:
  #         targetPath: "deployment-url.txt"
  #         artifact: "deployment-url"

  # - job: E2ETests
  #   dependsOn: Deploy
  #   condition: and(succeeded('Deploy'), eq(variables.is_preview, true))
  #   displayName: 'E2E Tests'
  #   steps:
  #     - checkout: self
  #     - task: NodeTool@0
  #       inputs:
  #         versionSpec: $(node_version_spec)
  #         checkLatest: true
  #     - task: npmAuthenticate@0
  #       inputs:
  #         workingFile: '.npmrc'
  #     - task: Cache@2
  #       inputs:
  #         key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
  #         path: $(pnpm_config_cache)
  #       displayName: Cache pnpm
  #     - script: |
  #         corepack enable
  #         corepack prepare pnpm@latest-8 --activate
  #       displayName: 'Setup PNPM'
  #     - script: pnpm config set store-dir $(pnpm_config_cache)
  #       displayName: 'Setup PNPM Config'
  #     - script: |
  #         pnpm install
  #       displayName: 'PNPM Install'
  #     - script: |
  #         pnpm exec playwright install --with-deps
  #       displayName: 'Install Playwright'
  #     - task: DownloadPipelineArtifact@2
  #       inputs:
  #         artifact: 'deployment-url'
  #         path: $(Pipeline.Workspace)
  #     - script: |
  #         export DEPLOY_URL=$(cat $(Pipeline.Workspace)/deployment-url.txt)
  #         pnpm test:e2e
  #       displayName: 'Run e2e tests'
  #       continueOnError: 'false'

  # - job: ClearCache
  #   dependsOn: Deploy
  #   condition: and(succeeded('Deploy'), ne(variables.IS_PR, true))
  #   displayName: "Clear cache"
  #   steps:
  #     - task: DownloadSecureFile@1
  #       name: "akamaiConfig"
  #       displayName: "Get secure file for akamai"
  #       inputs:
  #         secureFile: ".edgerc"
  #     - bash: |
  #         # Homebrew is the easiest way to install these tools. Otherwise you need to download & install the binaries. Homebrew only works on
  #         # the Ubuntu and MacOS hosted agents
  #         eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  #         echo $(cp_codes)
  #         brew -v
  #         brew config
  #         brew update
  #         brew search akamai
  #         brew info akamai
  #         brew install akamai
  #         # Make akamai think it asked the 'share statistics' question already.
  #         mkdir ~/.akamai-cli
  #         printf '[cli]\nenable-cli-statistics=false' >> ~/.akamai-cli/config
  #         # Install Akamai plugin for working with purge
  #         akamai install purge
  #         akamai purge --edgerc $(akamaiConfig.secureFilePath) invalidate --cpcode $(cp_codes)
  #       displayName: "Install Akamai Command Line Tools & purge cache"
