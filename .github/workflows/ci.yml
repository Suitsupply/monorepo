name: CI

on:
  push:
    branches:
      - main
      - acceptance
      - testing
      - feature/**
      - bugfix/**
  pull_request:
    # branches:
    #   - main
    #   - acceptance
    #   - testing

jobs:
  install_and_test:
    runs-on: ubuntu-latest
    env:
      CI: true
      node_version_spec: 20.12.2
      node_modules_root: '.'
      pnpm_config_cache: ${{ github.workspace }}/.pnpm-store
      is_pr: ${{ github.event_name == 'pull_request' }}
      is_main_branch: ${{ github.ref == 'refs/heads/main' }}
      is_acceptance_branch: ${{ github.ref == 'refs/heads/acceptance' }}
      is_testing_branch: ${{ github.ref == 'refs/heads/testing' }}
      is_preview: ${{ github.event_name == 'pull_request' || (github.ref != 'refs/heads/main' && github.ref != 'refs/heads/acceptance' && github.ref != 'refs/heads/testing') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: PNPM Setup
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.node_version_spec }}

      - name: PNPM Cache Restore
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
          key: pnpm-${{ runner.os }}-${{ github.sha }}-pnpm-lock.yaml
          restore-keys: |
            pnpm-${{ runner.os }}-${{ github.sha }}-
            pnpm-${{ runner.os }}-
            pnpm-

      - name: NX Cache Restore
        uses: actions/cache/restore@v3
        with:
          path: |
            .nx
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-
            nx-

      - name: Vercel Pull
        run: |
          vercel pull --yes --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.APPLICATION_VERCEL_SCOPE }}
          vercel env pull .env --yes --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.APPLICATION_VERCEL_SCOPE }}

      - name: PNPM Config
        run: pnpm config set store-dir ${{ env.pnpm_config_cache }}

      - name: PNPM Install
        run: npm install -g pnpm

      - name: PNPM Cache Save
        uses: actions/cache/save@v3
        with:
          path: |
            node_modules
          key: pnpm-${{ runner.os }}-${{ github.sha }}-pnpm-lock.yaml
          restore-keys: |
            pnpm-${{ runner.os }}-${{ github.sha }}-
            pnpm-${{ runner.os }}-
            pnpm-

      # TODO: Document.
      - uses: nrwl/nx-set-shas@v3

      # TODO: Document.
      # This line is needed for nx affected to work when CI is running on a PR
      - run: git branch --track main origin/main
        if: ${{ github.event_name }} == 'pull_request'

      # Main builds
      - name: Main Set Affected Projects
        if: ${{ env.is_pr }} == 'false'
        run: |
          echo "AFFECTED_PROJECTS=$(pnpm nx show projects --affected)" >> $GITHUB_ENV
          echo "$(pnpm nx print-affected --select=projects)"

      - name: Main Lint & Test & Build
        if: ${{ env.is_pr }} == 'false'
        run: |
          AFFECTED_PROJECTS=$(pnpm nx show projects --affected)
          nx affected \
            -t lint test build

      - name: Main Deploy Headless
        if: ${{ env.is_pr }} == 'false' && contains(env.AFFECTED_PROJECTS, '@susu/headless-commerce')
        run: |
          vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.APPLICATION_VERCEL_SCOPE }} > deployment-url.txt

      # PR builds
      - name: PR Set Affected Projects
        if: ${{ env.is_pr }} == 'true'
        run: |
          echo "AFFECTED_PROJECTS=$(pnpm nx show projects --affected --base=main --head=HEAD)" >> $GITHUB_ENV
          echo "$(pnpm nx print-affected --select=projects --base=main --head=HEAD)"

      - name: PR Lint & Test & Build
        if: ${{ env.is_pr }} == 'true'
        run: |
          nx affected \
            -t lint test build \
            --base=main \
            --head=HEAD

      - name: PR Deploy Headless
        if: ${{ env.is_pr }} == 'true' && contains(env.AFFECTED_PROJECTS, '@susu/headless-commerce')
        run: |
          vercel --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.APPLICATION_VERCEL_SCOPE }} > deployment-url.txt

      - name: NX Cache Save
        uses: actions/cache/save@v3
        with:
          path: |
            .nx
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-
            nx-
